<h1>有關本網站</h1>
<p>這門課程在教導學員如何利用網際環境管理與工程應用相關的內容管理.</p>
<p>總共使用兩套網際內容管理系統:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a></p>
<p style="padding-left: 30px;"><a href="https://www.blogger.com/">https://www.blogger.com/</a></p>
<p>Please use your student number to <a href="https://github.com/join">register a github account</a>.</p>
<p>請利用學號註冊一個 Github 帳號</p>
<p>Repository (倉儲): <a href="https://github.com/mdecourse/wcmj2020">https://github.com/mdecourse/wcmj2020</a> </p>
<p>Project (專案): <a href="https://github.com/mdecourse/wcmj2020/projects/1">https://github.com/mdecourse/wcmj2020/projects/1</a> </p>
<p>Gitter (討論區): <a href="https://gitter.im/mdecourse/wcmj2020">https://gitter.im/mdecourse/wcmj2020</a> </p>
<p>Web site (網站): <a href="https://mde.tw/wcmj2020">https://mde.tw/wcmj2020</a> </p>
<p>Blog (網誌): <a href="https://mde.tw/wcmj2020/blog">https://mde.tw/wcmj2020/blog</a> </p>
<p>Presentation (簡報): <a href="https://mde.tw/wcmj2020/reveal">https://mde.tw/wcmj2020/reveal</a> </p>
<p>電腦輔助設計室與協同設計室行事曆</p>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p>
<p>請登入 gm 電子郵箱後, 填寫下列表單:</p>
<p style="padding-left: 30px;"><a href="https://docs.google.com/forms/d/e/1FAIpQLSfetOEX-l_KYPUZuUuPft5IC1t-FttkoX1s_Nh9FRxYZXKYWA/viewform?usp=sf_link">選課學員基本資料</a></p>
<p style="padding-left: 30px;"><a href="https://docs.google.com/forms/d/e/1FAIpQLSdSvo89BOMfQOxFflhx-b3eDa_kYP0lUkTLfotdr1AEyQbItw/viewform?usp=sf_link">課程回饋表單</a></p>
<p style="padding-left: 30px;"><a href="https://docs.google.com/forms/d/e/1FAIpQLSfzbBnD7-GL2Nc41vmu2vGB6foETL0cNJpg7yrnMaHCqjRA9w/viewform?usp=sf_link">網際內容管理自評與互評表單</a></p><h2>CMSiMDE</h2>
<p><a href="https://github.com/mdecourse/cmsimde.git">https://github.com/mdecourse/cmsimde.git</a> 是一套利用 Python 解譯程式語言所編寫的網際內容管理系統, 使用者可以用來建立動態網站, 靜態網站, 網誌與網際簡報系統.</p>
<p>程式語言就其執行的方式, 可以分為編譯式與解譯式等兩種.</p>
<p>編譯式語言例如: C 程式語言</p>
<p>解譯式語言例如: Python 程式語言</p>
<p>編寫程式語言是工程師與電腦溝通的途徑之一, 工程師編寫計算機程式在電腦上執行, 可以透過電腦強大與重複的運算能力來解決問題.</p>
<p>CMSiMDE 就是工程師希望將各種與產品開發的過程資料, 存放在網站上, 除了可用於工程師之間的溝通外, 還能夠將產品開發的細節, 或者特定工具的使用詳細記錄, 以作為往後的參考.</p>
<h4>如何使用 CMSiMDE</h4>
<p>(1) 以子模組的方式使用 CMSiMDE</p>
<p>將 Github 倉儲 git clone 到近端工作區之後, 可以利用 git submodule add 指令將遠端倉儲中的 CMSiMDE 程式碼納為倉儲中的 cmsimde 子目錄, 並且保持與遠端原始碼的版次關聯 (也就是能夠指定採用遠端特定版本的 CMSiMDE 程式碼).</p>
<p style="padding-left: 30px;">好處: 子模組可以與遠端官方的倉儲保持關聯, 一旦 CMSiMDE 更新版本, 使用者可以利用 git pull 直接拉下遠端 CMSiMDE 的最新程式碼.</p>
<p style="padding-left: 30px;">壞處: 使用者若要 git clone 遠端的倉儲至近端, 需要加上 --recurse-submodules 選項</p>
<p>(2) 不以子模組的方式使用 CMSiMDE</p>
<p>假如不需要保持與遠端 CMSiMDE 倉儲特定版次的關聯性, 可以直接將 CMSiMDE 倉儲中的檔案, 直接放入 cmsimde 目錄, 並將其中 up_dir 的內容複製到希望建立網頁的倉儲主目錄中即可.</p>
<p style="padding-left: 30px;">好處: 使用者可以直接使用 git clone 指令, 拉下遠端倉儲的所有資料.</p>
<p style="padding-left: 30px;">壞處: 失去與遠端 CMSiMDE 倉儲的關聯, 假如要使用最新改版後的 CMSiMDE 原始碼, 必須另外 git clone 然後再取代倉儲中 cmsimde 的所有檔案.</p>
<p></p>
<p></p><h3>可攜程式環境</h3>
<p>為了讓工程師可以在不同的 Windows 10 64 位元電腦上管理 CMSiMDE 網際內容管理系統, 因此需要 Python 解譯環境以及一個文字檔案的編輯器.</p>
<p>這裡所安裝的 Python 解譯器選擇由 C 所編寫的 CPython, 可以從 <a href="https://www.python.org/">https://www.python.org/</a>  下載安裝. 但是在此我們要將 Python 解譯系統配置在 USB 隨身碟上, 使用者可以隨身攜帶, 一旦配置完成後, 可以在任何一台 Windows 10 64 位元的筆電或電腦上執行 Python 或 C 程式.</p>
<p>可攜 Python 程式環境的建立步驟:</p>
<p style="padding-left: 30px;">安裝 Python 套件時, 不要安裝 pip, 之後將 Python38 目錄複製到 data 目錄中, 然後建立 start.bat 指定使用可攜系統中的 Python, 之後再利用 g<a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=2ahUKEwivpbG6gfHoAhURrZQKHUT8ARcQFjAAegQIAhAB&amp;url=https%3A%2F%2Fbootstrap.pypa.io%2Fget-pip.py&amp;usg=AOvVaw0zKVO_zW0nkF7s0zdjWFNj">et-pip.py,</a> 以命令列中的 python get-pip.py 安裝 pip.</p>
<p>可攜 Tiny C 程式環境的建立步驟:</p>
<p style="padding-left: 30px;">從 <a href="https://bellard.org/tcc/">https://bellard.org/tcc/</a> 下載 Tiny C, 將 tcc 解開壓縮後放到 data 目錄中. 然後修改 wscite 目錄中的 cpp.properties, 使用 Tiny C 類解譯 .c 程式.</p>
<p>選用的文字編輯器: <a href="https://www.scintilla.org/SciTE.html">https://www.scintilla.org/SciTE.html</a></p>
<p>建立完成的可攜程式環境:</p>
<p style="padding-left: 30px;"><span style="text-decoration: line-through;">下載 <a href="https://drive.google.com/open?id=1SvMKQFViJ0mskt20UhSqkjzckB3noSJH">wcm2020_w2.7z (舊資料)</a></span></p>
<p style="padding-left: 30px;">請重新下載 <a href="https://drive.google.com/open?id=1xDTDfcHU18ipqZNbOufMkSZqibqNeL2T">wcmj2020_tool.7z</a>, 檔案大小為 435 MB, 解開壓縮後為 1.8 GB (其中包括 Mypaint, Dia 與 OBS 等)</p>
<p style="padding-left: 30px;">將 wcmj2020_tool.7z 解壓縮到隨身碟或電腦硬碟中, 將 home 與 home_ipv6 目錄中的 .gitconfig user.name 與 user.email 改為自己的 Github 帳號與 email 後, 利用 start.bat 啟動可攜系統, 利用 stop.bat 關閉可攜系統.</p><h3>C 程式</h3>
<p>前面所打造的可攜 Python 程式環境, 包括 SciTE 文字編輯器, 只要再加上 <a href="https://bellard.org/tcc/">https://bellard.org/tcc/</a>, 可將此一可攜環境設置成能夠編譯與類解譯 ANSI C 程式的環境</p>
<p>C 程式語言教材:</p>
<p style="padding-left: 30px;"><a href="/downloads/pdf/Programming-in-ANSI-C.pdf">Programming-in-ANSI-C.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/pdf/gnu_c_programming_tutorial.pdf">gnu_c_programming_tutorial.pdf</a></p>
<p>helloworld.c</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
	printf("hello world\n");
	return 'c';
}</pre>
<p>max.c</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int max(int,int);
int min(int,int);

int main() {

    int i,numbers_len;

    printf("How many numbers? ");
    scanf("%d",&amp;numbers_len);

    //int numbers[numbers_len]; //in this context this two lines are equivalent
    int *numbers = (int*)malloc(numbers_len*sizeof(int));

    for (i=0;i&lt;numbers_len;i++) {
        printf("N[%d] = ",i);
        scanf("%d",numbers+i);
        /* scanf("%d",&amp;numbers[i]); */
    }

    int big = *numbers;
    int small = numbers[0];
    for (i=1;i&lt;numbers_len;i++) {
        big = max(big,*(numbers+i));
        small = min(small,numbers[i]);
    }

    printf("The small number is %d\n",small);
    printf("The big number is %d\n",big);
}

int max(int n1, int n2) {
    // return the biggest number between n1 and n2
    return n1&gt;n2?n1:n2;
}

int min(int n1, int n2) {
    // return the smallest number between n1 and n2
    return n1&lt;n2?n1:n2;
}</pre>
<p></p><h3>Python 程式</h3>
<p>學習 Python3 的電子書: <span><a href="https://drive.google.com/file/d/17_LCSvwgtnIG8FnpezfUlEdbo3Y6G6CP/view?usp=sharing">2019_ABeginnersGuideToPython3Programming.pdf</a></span> (登入 @gm 帳號後下載)</p>
<p>上述電子書作者認為目前 Python 計算機程式語言之所以眾所矚目的原因:</p>
<p style="padding-left: 30px;">There is currently huge interest in the <a href="https://zh.wikipedia.org/wiki/Python">Python</a> programming language. This is driven by several factors; its use in schools with the <a href="https://zh.wikipedia.org/wiki/%E6%A0%91%E8%8E%93%E6%B4%BE">Raspberry Pi</a> platform, its ability to be used for <a href="https://zh.wikipedia.org/wiki/DevOps">DevOps</a> scripts, its use in <a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6">data science</a> and <a href="https://zh.wikipedia.org/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0">machine learning</a> and of course the language itself.</p>
<p>for.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">for i in range(10):
	print("使用 Python")</pre>
<p>square_root.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Python Program to calculate the square root

# Note: change this value for a different result
num = 8 

# To take the input from the user
#num = float(input('Enter a number: '))

num_sqrt = num ** 0.5
print('The square root of %0.3f is %0.3f'%(num ,num_sqrt))</pre>
<p></p><h3>Lua 程式</h3>
<p>Dynamic site:<a href="/downloads/lua2.html">downloads/lua2.html</a></p>
<p>Static site:<a href="/downloads/lua.html">downloads/lua.html</a></p><h1>電腦與網路</h1>
<p>由於電腦輔助設計室中的電腦若採 IPv4 協定上網, 必須透過 NAT (Network Address Translation) 才能連結到外部網際網路. 此舉將限制各電腦能夠聯外的網路頻寬, 因此平常上課將會直接將網路以 IPv6 對外連線, 可以直接使用 Google 的各種服務.</p>
<p>若需要連接至目前只支援 IPv4 協定連線的網站或服務, 則必須透過雙網路協定支援的代理主機, 才能完成連線, 其中包括 http, https, git, pip, sftp 等網路服務.</p>
<p><a href="/downloads/pdf/Introduction_ to_computers.pdf">Introduction_ to_computers.pdf</a></p>
<p><a href="/downloads/pdf/intro_to_computers.pdf">intro_to_computers.pdf</a></p>
<p><a href="/downloads/pdf/introduction_Computer_Networking.pdf">introduction_Computer_Networking.pdf</a></p>
<p><a href="/downloads/pdf/ComputerNetworks.pdf">An Introduction to computer networks.pdf</a></p>
<p><a href="/downloads/pdf/data_communication_computer_network_tutorial.pdf">data_communication_computer_network_tutorial.pdf</a></p><h2>Python</h2>
<p>課程評分程式</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
根據評分表單中的 自評分數, 互評得分, 教師評分, 計算學員課程成績
'''

def diff(自評分數, 互評得分):
    return abs(自評分數 - 互評得分)
    
def max(自評分數, 互評得分):
    if 自評分數 &gt; 互評得分:
        return 自評分數
    else:
        return 互評得分

def 分組比分(自評分數, 互評得分):
    if diff(自評分數, 互評得分) &lt; 5:
        學員得分 = max(自評分數, 互評得分)
    else:
        學員得分 = 互評得分 - diff(自評分數, 互評得分)
    return 學員得分
    
def 全班比分(學員得分, 教師評分):
    if diff(學員得分, 教師評分) &lt; 5:
        學員成績 = max(學員得分, 教師評分)
    else:
        學員成績 = 教師評分 - diff(學員得分, 教師評分)/4
    return 學員成績

def 學員成績(自評分數, 互評得分, 教師評分):
    學員分組得分 = 分組比分(自評分數, 互評得分)
    學員課程成績 = 全班比分(學員分組得分, 教師評分)
    return 學員課程成績
    
print(學員成績(80, 70, 60))
print(學員成績(60, 70, 80))</pre>
<p></p>
<h4>Python 語法</h4>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- for ggame -->
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<!-- Cango 程式庫 -->
<script src="/static/Cango-13v08-min.js"></script>
<script src="/static/CangoAxes-4v01-min.js"></script>
<script src="/static/gearUtils-05.js"></script>
<!-- for Konva 程式庫 -->
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<h4>開始練習 print() 用法, 並著手建立函式</h4>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
from browser import html
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
Ace.editor.setValue("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
def helloWorld():
    print("Hello World!")
helloWorld()
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""")
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<div id="brython_div"></div>
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 kw1
kw1 = beditor.editor("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "keyword" 的按鈕點按時, 執行 kw1 物件中的 prog 方法
doc["keyword"].bind('click', kw1.prog)
</script>
</p>
<p><!-- ****************************** keyword end --></p>
<p><!-- ***************************** slide ex1 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex1 = beditor.editor("""# 導入 Ex1 原始碼
a = 0
def my_print(n, input_str):
    print("以下將重覆列印 '", input_str + "' " + str(n) + "次")
    for i in range(n):
        print(i, input_str)
my_print(5, "Hello World!")
the_str = "開始學習 Python"
num = input("請輸入要列印的次數!")
my_print(int(num), the_str)
a = a + 1
print("(" + str(a) + ")", "_" * 25)
def myfun():
    yield 1
    yield 2
    yield 3
for i in myfun():
    print(i)
x = iter(myfun())
y = list(myfun())
a = a + 1
print("(" + str(a) + ")", "_" * 25)
print(x.__next__())
print(x.__next__())
print(x.__next__())
print(y)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex1" 的按鈕點按時, 執行 Ex1 物件中的 prog 方法
doc["ex1"].bind('click', Ex1.prog)
</script>
</p>
<p><!-- ***************************** slide ex1 end --></p>
<p><!-- ***************************** slide ex2 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex2 = beditor.editor("""# Python 的內建資料型別
import math
def f():
    print("This is a user-defined function")
    return 42
print("Some basic types in Python:")
print(type(2))           # int
print(type(2.2))         # float
print(type("2.2"))       # str  (string)
print(type(2 < 2.2))     # bool (boolean)
print(type(math))        # module
print(type(math.tan))    # builtin_function_or_method ("function" in Brython)
print(type(f))           # function (user-defined function)
print(type(type(42)))    # type
print("#####################################################")
print("And some other types we will see later in the course...")
print(type(Exception())) # Exception
print(type(range(5)))    # range
print(type([1,2,3]))     # list
print(type((1,2,3)))     # tuple
print(type({1,2}))       # set
print(type({1:42}))      # dict (dictionary or map)
print(type(2+3j))        # complex  (complex number) (we may not see this type)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex2" 的按鈕點按時, 執行 Ex2 物件中的 prog 方法
doc["ex2"].bind('click', Ex2.prog)
</script>
</p>
<p><!-- ***************************** slide ex2 end --></p>
<p><!-- ***************************** slide ex3 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex3 = beditor.editor("""# Python 的內建常數與函式
# 內建常數
print("Some builtin constants:")
print(True)
print(False)
print(None)
print("And some more constants in the math module:")
import math
print(math.pi)
print(math.e)
# 內建函式
print("Type conversion functions:")
print(bool(0))   # convert to boolean (True or False)
print(float(42)) # convert to a floating point number
print(int(2.8))  # convert to an integer (int)
print("And some basic math functions:")
print(abs(-5))   # absolute value
print(max(2,3))  # return the max value
print(min(2,3))  # return the min value
print(pow(2,3))  # raise to the given power (pow(x,y) == x**y)
print(round(2.354, 1)) # round with the given number of digits
# other examples
print(3 * 2)
print(3 * "abc")
print(3 + 2)
print("abc" + "def")
print(3 + "def")
# Type Affect Semantics
print(3 * 2)
print(3 * "abc")
print(3 + 2)
print("abc" + "def")
print(3 + "def")
# Integer Division
print("The / operator does 'normal' float division:")
print(" 5/3  =", ( 5/3))
print()
print("The // operator does integer division:")
print(" 5//3 =", ( 5//3))
print(" 2//3 =", ( 2//3))
print("-1//3 =", (-1//3))
print("-4//3 =", (-4//3))
# Modulus or Remainder Operator (%)
print(" 6%3 =", ( 6%3))
print(" 5%3 =", ( 5%3))
print(" 2%3 =", ( 2%3))
print(" 0%3 =", ( 0%3))
print("-4%3 =", (-4%3))
print(" 3%0 =", ( 3%0))
# Verify that (a%b) is equivalent to (a-(a//b)*b)
def mod(a, b):
  return a - (a//b)*b
print(41%14, mod(41,14))
print(14%41, mod(14,41))
print(-32%9, mod(-32,9))
print(32%-9, mod(32,-9))
# Operator Order (Precedence and Associativity)
print("Precedence:")
print(2+3*4)  # prints 14, not 20
print(5+4%3)  # prints  6, not 0 (% has same precedence as *, /, and //)
print(2**3*4) # prints 32, not 4096 (** has higher precedence than *, /, //, and %)
print()
print("Associativity:")
print(5-4-3)   # prints -2, not 4 (- associates left-to-right)
print(4**3**2) # prints 262144, not 4096 (** associates right-to-left)
# Approximate Values of Floating-Point Numbers
print(0.1 + 0.1 == 0.2)        # True, but...
print(0.1 + 0.1 + 0.1 == 0.3)  # False!
print(0.1 + 0.1 + 0.1)         # prints 0.30000000000000004 (uh oh)
print((0.1 + 0.1 + 0.1) - 0.3) # prints 5.55111512313e-17 (tiny, but non-zero!)
# Equality Testing with math.isclose
print("The problem....")
d1 = 0.1 + 0.1 + 0.1
d2 = 0.3
print(d1 == d2)                # False (never use == with floats!)
print()
print("The solution...")
import math
print(math.isclose(d1, d2))  # True!
# math.isclose checks if the two numbers are ALMOST equal, within a small error
# Short-Circuit Evaluation
def yes():
    return True
def no():
    return False
def crash():
    return 1/0 # crashes!
print(no() and crash()) # Works!
print(crash() and no()) # Crashes!
print (yes() and crash()) # Never runs (due to crash), but would also crash (without short-circuiting)
# Or operator
def yes():
    return True
def no():
    return False
def crash():
    return 1/0 # crashes!
print(yes() or crash()) # Works!
print(crash() or yes()) # Crashes!
print(no() or crash())  # Never runs (due to crash), but would also crash (without short-circuiting)
# more examples
def isPositive(n):
    result = (n > 0)
    print("isPositive(",n,") =", result)
    return result
def isEven(n):
    result = (n % 2 == 0)
    print("isEven(",n,") =", result)
    return result
print("Test 1: isEven(-4) and isPositive(-4))")
print(isEven(-4) and isPositive(-4)) # Calls both functions
print("----------")
print("Test 2: isEven(-3) and isPositive(-3)")
print(isEven(-3) and isPositive(-3)) # Calls only one function!
# type vs isinstance
# Both type and isinstance can be used to type-check
# In general, (isinstance(x, T)) will be more robust than (type(x) == T)
print(type("abc") == str)
print(isinstance("abc", str))
# We'll see better reasons for this when we cover OOP + inheritance later
# in the course.  For now, here is one reason:  say you wanted to check
# if a value is any kind of number (int, float, complex, etc). 
# You could do:
def isNumber(x):
    return ((type(x) == int) or
            (type(x) == float)) # are we sure this is ALL kinds of numbers?
print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))
# But this is cleaner, and works for all kinds of numbers, including
# complex numbers for example:
import numbers
def isNumber(x):
    return isinstance(x, numbers.Number) # works for any kind of number
print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex3" 的按鈕點按時, 執行 Ex3 物件中的 prog 方法
doc["ex3"].bind('click', Ex3.prog)
</script>
</p>
<p><!-- ***************************** slide ex3 end --></p>
<p><!-- ***************************** slide ex4 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex4 = beditor.editor("""# Python 函式
# Vocabulary
x = 5
def f(y, z):
    result = x + y + z
    return result
print(f(1, 2)) # 8
print(f(3, 4)) # 12
# Vocabulary:
#   variables: global vs. local
#   statements vs. expressions
#   function definitions vs. function calls
#   parameters vs. arguments
# Return Statements
# Basic example
def isPositive(x):
    return (x > 0)
print(isPositive(5))  # True
print(isPositive(-5)) # False
print(isPositive(0))  # False
# Return ends the function immediately
def isPositive(x):
    print("Hello!")   # runs
    return (x > 0)
    print("Goodbye!") # does not run ("dead code")
print(isPositive(5))  # prints Hello, then True
# No return statement --> return None
def f(x):
    x + 42
print(f(5)) # None
def f2(x):
    result = x + 42
print(f2(5)) # None
# Print versus Return
# This is a common early mistake (confusing print and return):
def cubed(x):
    print(x**3) # Here is the error!
cubed(2)          # seems to work!
print(cubed(3))   # sort of works (but prints None, which is weird)
print(2*cubed(4)) # Error!
# Once again (correctly)
def cubed2(x):
    return (x**3) # That's better!
cubed2(2)          # seems to be ignored (why?)
print(cubed2(3))   # works!
print(2*cubed2(4)) # works!
# Different Parameter and Return Types
def hypotenuse(a, b):
    return ((a**2) + (b**2))**0.5
print(hypotenuse(3, 4)) # 5.0 (not 5)
print("---------------------")
def xor(b1, b2):
    return ((b1 and (not b2)) or (b2 and (not b1)))  # same as (b1 != b2)
print(xor(True,  True))  # False
print(xor(True,  False)) # True
print(xor(False, True))  # True
print(xor(False, False)) # False
print("---------------------")
def isPositive(n):
    return (n > 0)
print(isPositive(10))     # True
print(isPositive(-1.234)) # False
# Function Composition
def f(w):
    return 10*w
def g(x, y):
    return f(3*x) + y
def h(z):
    return f(g(z, f(z+1)))
print(h(1)) # hint: try the "visualize" feature
# Helper Functions 
def onesDigit(n):
    return n%10
def largerOnesDigit(x, y):
    return max(onesDigit(x), onesDigit(y))
print(largerOnesDigit(134, 672)) # 4
print(largerOnesDigit(132, 674)) # Still 4
# Test Functions
# A broken test function
def onesDigit(n):
    return n%10
def testOnesDigit():
    print("Testing onesDigit()...", end="")
    assert(onesDigit(5) == 5)
    assert(onesDigit(123) == 3)
    assert(onesDigit(100) == 0)
    assert(onesDigit(999) == 9)
    print("Passed!")
testOnesDigit() # Passed!  Why is this bad?
# A better version
def onesDigit2(n):
    return n%10
def testOnesDigit2():
    print("Testing onesDigit()...", end="")
    assert(onesDigit2(5) == 5)
    assert(onesDigit2(123) == 3)
    assert(onesDigit2(100) == 0)
    assert(onesDigit2(999) == 9)
    assert(onesDigit2(-123) == 3) # Added this test
    print("Passed!")
testOnesDigit2() # Crashed!  So the test function worked!
# Local Variable Scope
def f(x):
    print("In f, x =", x)
    x += 5
    return x
def g(x):
    return f(x*2) + f(x*3)
print(g(2))
# Another example
def f(x):
    print("In f, x =", x)
    x += 7
    return round(x / 3)
def g(x):
    x *= 10
    return 2 * f(x)
def h(x):
    x += 3
    return f(x+4) + g(x)
print(h(f(1)))
# Global Variable Scope
# In general, you should avoid using global variables.
# You will even lose style points if you use them!
# Still, you need to understand how they work, since others
# will use them, and there may also be some very few occasions
# where you should use them, too!
g = 100
def f(x):
    return x + g
print(f(5)) # 105
print(f(6)) # 106
print(g)    # 100
# Another exampl
g = 100
def f(x):
    # If we modify a global variable, we must declare it as global.
    # Otherwise, Python will assume it is a local variable.
    global g
    g += 1
    return x + g
print(f(5)) # 106
print(f(6)) # 108
print(g)    # 102
# Default arguments
# Sometimes, a function has a parameter that has a natural default
# We can specify that default value in the function definition,
# then choose whether or not to include it in the function call.
def f(x, y=10):
    return x + y
print(f(5))   # 15
print(f(5,1)) # 6
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex4" 的按鈕點按時, 執行 Ex4 物件中的 prog 方法
doc["ex4"].bind('click', Ex4.prog)
</script>
</p>
<p><!-- ***************************** slide ex4 end --></p>
<!-- line drawing start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Draw = beditor.editor("""# Line drawing
# 導入 doc
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 300, height = 200)
canvas.id = "line_drawing"
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["line_drawing"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
# 設定填圖顏色
ctx.fillStyle = "rgb(200,0,0)"
# 設定畫筆顏色
ctx.strokeStyle = "rgb(0,0,200)"
# 乘上 deg 可轉為徑度單位
deg = math.pi / 180
# 建立多邊形定點位置畫線函式
def star(radius, xc, yc, n):
    #radius = 100
    #xc = 200
    #yc = 200
    xi = xc + radius*math.cos((360/n)*deg+90*deg)
    yi = yc - radius*math.sin((360/n)*deg+90*deg)
    ctx.beginPath()
    ctx.moveTo(xi,yi)
    for i in range(2, n+1):
        x = xc + radius*math.cos((360/n)*deg*i+90*deg)
        y = yc - radius*math.sin((360/n)*deg*i+90*deg)
        ctx.lineTo(x,y)
# 以下利用多邊形畫線函式呼叫執行畫框線或填入顏色
# 畫五邊形框線
star(50, 50, 50, 5)
ctx.closePath()
ctx.stroke()
    
# 填三角形色塊
star(50, 150, 50, 3)
ctx.closePath()
ctx.fill()
    
# 改變畫線顏色後, 畫七邊形框線
ctx.strokeStyle = "rgb(0,200,20)"
star(50, 250, 50, 7)
ctx.closePath()
ctx.stroke()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "draw" 的按鈕點按時, 執行 Draw 物件中的 prog 方法
doc["draw"].bind('click', Draw.prog)
</script>
</p>
<!-- line drawing ends -->
<p></p>
<!-- flag ex start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Flag = beditor.editor("""# 畫中華民國國旗
# 導入 doc
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 300, height = 200)
canvas.style = {"width": "100%"}
canvas.id = "taiwan_flag"
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "flag" 的按鈕點按時, 執行 Flag 物件中的 prog 方法
doc["flag"].bind('click', Flag.prog)
</script>
</p>
<!-- flag ex ends -->
<p></p>
<!-- bunny start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Bunny = beditor.editor("""# Ggame
from ggame import App, ImageAsset, Sprite, MouseEvent
from random import random, randint
from browser import document as doc
from browser import html
import math
# 引入既有的id="graphics-column" 標註
graphics_column = doc["graphics-column"]
# 建立內定名稱為 "ggame-canvas" 的 canvas 標註
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "ggame-canvas"
# 將 canvas 插入 gc 標註中
graphics_column <= canvas
class Bunny(Sprite):
    
    asset = ImageAsset("/images/bunny.png")
    
    def __init__(self, position):
        super().__init__(Bunny.asset, position)
        # register mouse events
        App.listenMouseEvent(MouseEvent.mousedown, self.mousedown)
        App.listenMouseEvent(MouseEvent.mouseup, self.mouseup)
        App.listenMouseEvent(MouseEvent.mousemove, self.mousemove)
        self.dragging = True
        self.deltax = 0
        self.deltay = 0
    
    def step(self):
        # Every now and then a bunny hops...
        if random() < 0.01:
            self.x += randint(-20,20)
            self.y += randint(-20,20)
        
        
    def mousedown(self, event):
        # capture any mouse down within 50 pixels
        self.deltax = event.x - (self.x + self.width//2) 
        self.deltay = event.y - (self.y + self.height//2)
        if abs(self.deltax) < 50 and abs(self.deltay) < 50:
            self.dragging = True
            # only drag one bunny at a time - consume the event
            event.consumed = True
            
    def mousemove(self, event):
        if self.dragging:
            self.x = event.x - self.deltax - self.width//2
            self.y = event.y - self.deltay - self.height//2
            event.consumed = True
            
    def mouseup(self, event):
        if self.dragging:
            self.dragging = False
            event.consumed = True
            
        
class DemoApp(App):
    
    def __init__(self):
        super().__init__()
        for i in range(5):
            Bunny((randint(50, 600), randint(50, 400)))
        
    def step(self):
        # Override step to perform action on each frame update
        for bunny in self.spritelist:
            bunny.step()
# Create the app
app = DemoApp()  
# Run the app
app.run()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "bunny" 的按鈕點按時, 執行 Bunny 物件中的 prog 方法
doc["bunny"].bind('click', Bunny.prog)
</script>
</p>
<!-- bunny ends -->
<p></p>
<!-- clear canvas start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Clear = beditor.editor("""# 清除畫布
from browser import document, html
brython_div = document["brython_div"] 
brython_div.clear()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "clear" 的按鈕點按時, 執行 Clear 物件中的 prog 方法
doc["clear"].bind('click', Clear.prog)
</script>
</p>
<!-- clear canvas ends -->
<p></p>
<!-- cango spur gears start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Spur = beditor.editor("""# Cango Spur Gears
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "cango_gear"
brython_div = doc["brython_div"]
brython_div <= canvas
from browser import document as doc
from browser import window
import math
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new
tweener = window.Tweener.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")
######################################
# 畫正齒輪輪廓
#####################################
def cangoGear(n, m, pa):
    # n 為齒數
    #n = 17
    # pa 為壓力角
    #pa = 25
    # m 為模數, 根據畫布的寬度, 計算適合的模數大小
    # Module = mm of pitch diameter per tooth
    #m = 0.8*canvas.width/n
    # pr 為節圓半徑
    pr = n*m/2 # gear Pitch radius
    # generate gear
    data = creategeartooth(m, n, pa)
    # Brython 程式中的 print 會將資料印在 Browser 的 console 區
    #print(data)
    gearTooth = path(data, {
      "fillColor":"#ddd0dd",
      "border": True,
      "strokeColor": "#606060" })
    gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
    # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
    gear = gearTooth.dup()
    # gear 為單一齒的輪廓資料
    #cgo.render(gearTooth)
    # 利用單齒輪廓旋轉, 產生整個正齒輪外形
    for i in range(1, n):
        # 將 gearTooth 中的資料複製到 newTooth
        newTooth = gearTooth.dup()
        # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
        newTooth.rotate(360*i/n)
        gear.appendPath(newTooth)
    # 建立軸孔
    # add axle hole, hr 為 hole radius
    hr = 0.6*pr # diameter of gear shaft
    shaft = path(shapedefs.circle(hr), {
      "fillColor":"#ddd0dd",
      "border": True,
      "strokeColor": "#606060" })
    gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
    return gear
# 設定兩齒齒數
n1 = 17
n2 = 11
n3 = 13
reduced_ratio = 0.5
# 使用 80% 的畫布寬度
m = 0.8*canvas.width/((n1+n2+n3)*reduced_ratio)
# 設定共同的壓力角
pa = 25
# n 齒輪的節圓半徑
pr1 = n1*m/2
# n2 齒輪的節圓半徑
pr2 = n2*m/2
pr3 = n3*m/2
cx = canvas.width/2
cy = canvas.height/2
# 建立 gears
gear1 = cangoGear(n1, m, pa)
gear2 = cangoGear(n2, m, pa)
gear3 = cangoGear(n3, m, pa)
from browser.timer import set_interval
deg = math.pi/180
rotate_speed = 12*deg
def draw():
    cgo.clearCanvas()
    gear1.transform.translate(cx-(pr1+pr2)*reduced_ratio, cy)
    gear1.transform.scale(reduced_ratio)
    gear1.transform.rotate(0)
    gear1.rotate(rotate_speed)
    cgo.render(gear1)
    
    gear2.transform.translate(cx, cy)
    gear2.transform.scale(reduced_ratio)
    gear2.transform.rotate(180+(360/n2/2))
    gear2.rotate(-(rotate_speed)*n1/n2)
    cgo.render(gear2)
    
    gear3.transform.translate(cx+(pr2+pr3)*reduced_ratio, cy)
    gear3.transform.scale(reduced_ratio)
    gear3.transform.rotate(180+(360/n3/2)+(180+(360/n2/2))*n2/n3)
    gear3.rotate((rotate_speed*n1/n2)*(n2/n3))
    cgo.render(gear3)
set_interval(draw, 2)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "spur" 的按鈕點按時, 執行 Spur 物件中的 prog 方法
doc["spur"].bind('click', Spur.prog)
</script>
</p>
<!-- cango spur gears ends -->
<p></p>
<!-- temp convert start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Temp = beditor.editor("""# Temperature Conversion
# Temperature Conversion
'''
C to F: Celsius to Fahrenheit Conversion Formula. To convert temperatures in degrees Celsius to Fahrenheit, multiply by 1.8 (or 9/5) and add 32.
To convert temperatures in degrees Fahrenheit to Celsius, subtract 32 and multiply by .5556 (or 5/9).
Fahrenheit = Celsius*9/5 + 32
Celsium = (Fahrenheit - 32)*5/9
'''
from browser import document, html
brython_div = document["brython_div"]
def c2f(c):
    f = round(c*9/5 + 32, 3)
    return "Celsiusc: "+ str(c) +         " degrees = Fahrenheit: " + str(f) + " degrees"
    
def f2c(f):
    c = round((f - 32)*5/9, 3)
    return "Fahrenheit: "+ str(f) +         " degrees = Celsiusc: " + str(c) + " degrees"
    
choice = input("c2f or f2c")
if choice == "c2f":
    '''
    c = float(input("input Celsius in degrees"))
    print(c2f(c))
    '''
    for deg in range(100):
        brython_div <= c2f(deg)
        brython_div <= html.BR()
else:
    '''
    f = float(input("input Fahrenheit in degrees"))
    print(f2c(f))
    '''
    for deg in range(100):
        brython_div <= f2c(deg)
        brython_div <= html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "temp" 的按鈕點按時, 執行 Temp 物件中的 prog 方法
doc["temp"].bind('click', Temp.prog)
</script>
</p>
<!-- temp convert ends -->
<p></p>
<!-- forloop start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Forloop = beditor.editor("""# For loop
for i in range(5):
    print(i)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "forloop" 的按鈕點按時, 執行 Forloop 物件中的 prog 方法
doc["forloop"].bind('click', Forloop.prog)
</script>
</p>
<!-- forloop ends -->
<p></p>
<!-- guess start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Guess = beditor.editor("""# 猜數字遊戲
from browser import document, html, alert
import random
# 跳出文字說明視窗
alert("開始玩猜數字遊戲")
# 利用 random 模組中的 randint 取 1~100 間的亂數
標準答案 = random.randint(1, 100)
# 利用 input 函式視窗, 取使用者所猜的數字, 轉為整數
你猜的數字 = int(input("請輸入您所猜 1~100 間的整數:"))
# 猜測次數起始值設為 1
猜測次數 = 1
# 進入重複迴圈, 直到猜對數字
while 標準答案 != 你猜的數字:
    # 根據使用者所猜的數字, 與答案比較後, 給出提示
    if 標準答案 < 你猜的數字:
        alert("猜第" + str(猜測次數) + "次, 太大了，再猜 :)加油")
    else:
        alert("猜第" + str(猜測次數) + "次, 太小了，再猜 :)加油")
    你猜的數字 = int(input("請輸入您所猜 1~100 間的整數:"))
    # 猜測次數累加
    猜測次數 += 1
# 跳出迴圈表示猜對, 給出最後文字說明視窗
alert("猜對了！答案為" + str(標準答案) + ", 總共猜了" + str(猜測次數) + "次")
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "guess" 的按鈕點按時, 執行 Guess 物件中的 prog 方法
doc["guess"].bind('click', Guess.prog)
</script>
</p>
<!-- guess ends -->
<p></p>
<!-- autoguess start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Autoguess = beditor.editor("""# 程式自動猜數字遊戲
from browser import document, html, alert
import random
 
id4 = document["brython_div"]
執行次數 = 100
總猜測次數 = 0
for i in range(執行次數):
    id4 <= "第" + str(i+1) + "次玩:" + html.BR()
    下限 = 1
    上限 = 100
    標準答案 = random.randint(下限, 上限)
    pc猜的數字 = random.randint(下限, 上限)
    #print(標準答案, pc猜的數字)
    #integer int()
    #string str()
    #float float()
    #你猜的數字 = int(input("請輸入您所猜的整數:"))
    猜測次數 = 1
    while 標準答案 != pc猜的數字:
        if 標準答案 < pc猜的數字:
            #print("太大了，再猜一次 :)加油")
            # 因此已經確定"pc猜的數字"不是答案, 因此 - 1
            id4 <= "電腦猜的數字:" + str(pc猜的數字) + " 太大了!" + html.BR()
            上限 = pc猜的數字 - 1
        else:
            #print("太小了，再猜一次 :)加油")
            # 因此已經確定"pc猜的數字"不是答案, 因此 + 1
            id4 <= "電腦猜的數字:" + str(pc猜的數字) + " 太小了!" + html.BR()
            下限 = pc猜的數字 + 1
        #pc猜的數字 = int(input("請輸入您所猜的整數:"))
        pc猜的數字 = random.randint(下限, 上限)
        猜測次數 += 1
    #print("猜對了！總共猜了", 猜測次數, "次")
    id4 <= "電腦猜對了, 答案為: " + str(標準答案) + ", 總共猜了 "+ str(猜測次數) + "次" + html.BR()
    總猜測次數 += 猜測次數
平均猜測次數 = int(總猜測次數/執行次數)
#print("平均次數", 平均猜測次數)
id4 <= "平均次數: " + str(平均猜測次數)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "autoguess" 的按鈕點按時, 執行 Autoguess 物件中的 prog 方法
doc["autoguess"].bind('click', Autoguess.prog)
</script>
</p>
<!-- autoguess ends -->
<p></p>
<!-- lottery start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Lottery = beditor.editor("""# 大樂透電腦選號
# lottery
from browser import document, html, alert
import random
try:
    total = int(input("請問要出幾張大樂透彩卷號碼?"))
except:
    alert("請輸入要選擇大樂透電腦選號數量的'整數'")
    total = int(input("請問要出幾張大樂透彩卷號碼?"))
# 準備將電腦選出的號碼, 輸出到內定 id="brython_div" 的標註區域
output_div = document["brython_div"]
output_div <= "以下將出 " + str(total) + " 張電腦選號彩卷:" + html.BR()
for i in range(1, total + 1):
    # 利用 list(range()) 產生 1 到 49 的 population list
    # 然後再透過 random.sample(population, k) 
    # 從 population, 產生 k 個不同的數字
    numbers = random.sample(list(range(1, 49)), 6)
    output_div <= str(i) + ". 電腦選號為: " + str(numbers) + html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "lottery" 的按鈕點按時, 執行 Lottery 物件中的 prog 方法
doc["lottery"].bind('click', Lottery.prog)
</script>
</p>
<!-- lottery ends -->
<p></p>
<!-- 台灣威力彩 start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Weleadlottery = beditor.editor("""# 威力彩電腦選號
# weleadlottery
from browser import document, html, alert
import random
try:
    total = int(input("請問要出幾張威力彩卷號碼?"))
except:
    alert("請輸入要選擇威力彩電腦選號數量的'整數'")
    total = int(input("請問要出幾張威力彩卷號碼?"))
# 準備將電腦選出的號碼, 輸出到內定 id="brython_div" 的標註區域
output_div = document["brython_div"]
output_div <= "以下將出 " + str(total) + " 張威力彩電腦選號彩卷:" + html.BR()
for i in range(1, total + 1):
    # 利用 list(range()) 產生第一區 1 到 38 , 第二區 1 到 8 的 population list
    # 然後再透過 random.sample(population, k) 
    # 從 population, 產生 k 個不同的數字
    section1_numbers = random.sample(list(range(1, 38)), 6)
    section2_number = random.sample(list(range(1, 8)), 1)
    output_div <= str(i) + ". 電腦選號第一區為: " + str(section1_numbers) + html.BR()
    output_div <= ". 電腦選號第二區為: " + str(section2_number) + html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "lottery" 的按鈕點按時, 執行 Lottery 物件中的 prog 方法
doc["weleadlottery"].bind('click', Weleadlottery.prog)
</script>
</p>
<!-- 台灣威力彩 ends -->
<p></p>
<!-- bezier starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Bezier = beditor.editor("""# Cango Bezier 繪圖
from browser import window, html
from browser import document as doc
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "canvas"
brython_div = doc["brython_div"]
brython_div <= canvas
# Javascript 物件
cango = window.Cango.new
path = window.Path.new
shape = window.Shape.new
group = window.Group.new
# Javascript 變數
shapedefs = window.shapeDefs
g1 = cango("canvas")
g1.clearCanvas()
g1.gridboxPadding(10, 10, 5, 7)
g1.fillGridbox("lightgreen")
g1.setWorldCoordsRHC(-100, -100, 400)
x1 = 40
y1 = 20
cx1 = 90
cy1 = 120
x2 = 120
y2 = 100
cx2 = 130
cy2 = 20
cx3 = 150
cy3 = 120
x3 = 180
y3 = 60
def dragC1(mousePos):
    global cx1, cy1
    cx1 = mousePos.x
    cy1 = mousePos.y
    drawCurve()
def dragC2(mousePos):
    global cx2, cy2
    cx2 = mousePos.x
    cy2 = mousePos.y
    drawCurve()
def dragC3(mousePos):
    global cx3, cy3
    cx3 = mousePos.x
    cy3 = mousePos.y
    drawCurve()
def drawCurve():
    qbez = path(['M', x1, y1, 'Q', cx1, cy1, x2, y2], {
      'strokeColor':'blue'})
    cbez = path(['M', x2, y2, 'C', cx2, cy2, cx3, cy3, x3, y3], {
      'strokeColor':'green'})
    L1 = path(['M', x1, y1, 'L', cx1, cy1, x2, y2], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    L2 = path(['M', x2, y2, 'L', cx2, cy2], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    L3 = path(['M', x3, y3, 'L', cx3, cy3], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    c1.transform.translate(cx1, cy1)
    c2.transform.translate(cx2, cy2)
    c3.transform.translate(cx3, cy3)
    grp = group(qbez, cbez, L1, L2, L3, c1, c2, c3)
    g1.render(grp, True)
g1.clearCanvas("lightyellow")
g1.deleteAllLayers()
g1.setWorldCoordsRHC(0, 0, 200)
c1 = shape(shapedefs.circle(6), {'fillColor':'red'})
c1.enableDrag(None, dragC1, None)
c2 = shape(shapedefs.circle(6), {'fillColor':'red'})
c2.enableDrag(None, dragC2, None)
c3 = shape(shapedefs.circle(6), {'fillColor':'red'})
c3.enableDrag(None, dragC3, None);
drawCurve()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "bezier" 的按鈕點按時, 執行 Bezier 物件中的 prog 方法
doc["bezier"].bind('click', Bezier.prog)
</script>
</p>
<!-- bezier ends -->
<p></p>
<!-- turtle1 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle1 = beditor.editor("""# Turtle1 繪圖
from browser import window, html
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle()
t.width(5)
for c in ['red', '#00ff00', '#fa0', 'rgb(0,0,200)']:
    t.color(c)
    t.forward(100)
    t.left(90)
# dot() and write() do not require the pen to be down
t.penup()
t.goto(-30, -100)
t.dot(40, 'rgba(255, 0, 0, 0.5')
t.goto(30, -100)
t.dot(40, 'rgba(0, 255, 0, 0.5')
t.goto(0, -70)
t.dot(40, 'rgba(0, 0, 255, 0.5')
t.goto(0, 125)
t.color('purple')
t.write("這就是 Brython, 網頁上的 Python", font=("Arial", 15, "normal"))
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle1" 的按鈕點按時, 執行 Turtle1 物件中的 prog 方法
doc["turtle1"].bind('click', Turtle1.prog)
</script>
</p>
<!-- turtle1 ends -->
<p></p>
<!-- turtle2 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle2 = beditor.editor("""# Turtle2 繪圖
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
star = turtle.Turtle()
for i in range(5):
    star.forward(250)
    star.right(144)
    
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle2" 的按鈕點按時, 執行 Turtle2 物件中的 prog 方法
doc["turtle2"].bind('click', Turtle2.prog)
</script>
</p>
<!-- turtle2 ends -->
<p></p>
<!-- turtle3 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle3 = beditor.editor("""# Turtle3 繪圖
# https://michael0x2a.com/blog/turtle-examples
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
painter = turtle.Turtle()
painter.pencolor("blue")
for i in range(50):
    painter.forward(50)
    painter.left(123) # Let's go counterclockwise this time 
    
painter.pencolor("red")
for i in range(50):
    painter.forward(100)
    painter.left(123)
    
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle3" 的按鈕點按時, 執行 Turtle3 物件中的 prog 方法
doc["turtle3"].bind('click', Turtle3.prog)
</script>
</p>
<!-- turtle3 ends -->
<p></p>
<!-- turtle4 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle4 = beditor.editor("""# Turtle4 繪圖
# https://docs.python.org/3.7/library/turtle.html?highlight=turtle
# https://fiftyexamples.readthedocs.io/en/latest/turtle.html
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
# 輸入 "turtle" 字串, 表示要使用內建的烏龜圖示
t = turtle.Turtle("turtle")
# 設定繪圖尺寸
screen_x = 500-20
screen_y = 300
# 提筆, 將烏龜移動到畫布中心
t.penup()
t.home()
# 內定方向為右, 前進 screen_x/2
t.forward(screen_x / 2)
# 將方向往右轉 90 度
t.right(90)
# 此時方向向下, 前進 screen_y/2
t.forward(screen_y / 2)
# 令烏龜方向轉絕對角度 180, 等同轉相對角度 90 度, 即 t.right(90)
t.setheading(180)
# 將畫筆顏色設為紅色
t.pencolor('red')
# 下筆準備繪圖
t.pendown()
# 設筆寬度為 10
t.pensize(10)
# 進入重複迴圈, 此時方向向右, 分別
# 前進 screen_x, 之後轉 90 度, 方向朝上
# 再前進 screen_y, 之後再轉 90 度, 方向朝右
# 再前進 screen_x, 之後轉 90 度, 方向朝下
# 最後再前進 screen_y 後, 將方向轉為向左
for distance in (screen_x, screen_y, screen_x, screen_y):
    t.forward(distance)
    t.right(90)
# 提筆後, 將烏龜轉回內定方向回到畫布中心
t.penup()
t.home()
# 完成 turtle 繪圖
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle4" 的按鈕點按時, 執行 Turtle4 物件中的 prog 方法
doc["turtle4"].bind('click', Turtle4.prog)
</script>
</p>
<!-- turtle4 ends -->
<p></p>
<!-- turtle5 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle5 = beditor.editor("""# Turtle5 繪圖
# https://brython.info/gallery/turtle.html
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle("turtle")
t.speed(1)
t.forward(50)
print("Should be (50, 0):", t.position())
print("Should be 50: ", t.xcor())
print("Should be 0: ", t.ycor())
t.left(90)
t.color("blue")
t.speed(2)
t.fd(50)
print("Should be (50, 50):", t.pos())
print("Should be 225: ", t.towards(0, 0))
print("Should be 90: ", t.heading())
print("Should be approximately 71:", t.distance(0, 0))
# Draw the same square in three different angle modes
t.width(4)
print("Drawing using degrees - the default")
print("Heading should be 90: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(90)
print("Drawing using radians")
t.radians()
print("Heading should be pi/2: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(math.pi/2)
print("Drawing using gradients")
t.degrees(400)
print("Heading should be 100: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(100)
t.degrees()
t.width(1)
t.lt(90)
t.color("orange")
t.backward(50)
t.right(90)
t.color("green")
t.back(50)
t.rt(90)
t.color("red")
t.bk(50)
t.stamp()
t.speed(4)
t.color("black", "white")
t.goto(-100, 100)
t.stamp()
t.color("blue", "yellow")
t.setposition(0, 100)
t.stamp()
t.color("green", "white")
t.setpos(100, 100)
t.stamp()
t.speed(10)
t.color("orange")
t.sety(-100)
t.setx(-100)
t.stamp()
t.color("cyan")
t.home()
t.stamp()
t.color("green")
t.width(4)
t.setheading(180)
t.forward(150)
t.seth(90)
t.fd(20)
t.dot(30, "rgba(255, 0, 0, 0.2)")
t.color("red")
t.speed(0)
t.forward(30)
t.left(90)
t.circle(30)
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle5" 的按鈕點按時, 執行 Turtle5 物件中的 prog 方法
doc["turtle5"].bind('click', Turtle5.prog)
</script>
</p>
<!-- turtle5 ends -->
<p></p>
<!-- turtle6 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle6 = beditor.editor("""# Turtle6 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle("turtle")
t.speed(10)
colors = ['red', 'purple', 'blue', 'green', 'orange']
for x in range(150):
    t.pencolor(colors[x % 5])
    t.width(x/10 + 1)
    t.forward(x)
    t.left(59)
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle6" 的按鈕點按時, 執行 Turtle6 物件中的 prog 方法
doc["turtle6"].bind('click', Turtle6.prog)
</script>
</p>
<!-- turtle6 ends -->
<p></p>
<!-- turtle7 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle7 = beditor.editor("""# Turtle7 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
screen=turtle.Screen()    #making a canvas for drawing
screen.bgcolor('black')    #making canvas black
trtl=turtle.Turtle()  #making a turtle
trtl.pencolor('red')    #making colour of the pen red
trtl.pensize(5)    #choosing the size of pen nib 
trtl.speed(10)    #choosing the speed of drawing
# shape should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’
trtl.shape('turtle')   #choosing the shape of pen nib
trtl.forward(150)    #drawing a line of 150 pixels
trtl.right(90)    #asking turtle to turn 90 degrees
trtl.forward(150)    #drawing a line of 150 pixels
trtl.penup()    # preparing for moving pen without drawing
trtl.setpos(-140,-120)    # making the new position of the turtle
trtl.pendown()   # bringing the pen down for drawing again
trtl.pencolor('green')    # choosin the pen colour as green
trtl.write('Brython 烏龜繪圖', font=("Arial", 20, "bold"))    # chosing the font
trtl.penup()
trtl.ht()    # hiding the turtle from the screen
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle7" 的按鈕點按時, 執行 Turtle7 物件中的 prog 方法
doc["turtle7"].bind('click', Turtle7.prog)
</script>
</p>
<!-- turtle7 ends -->
<p></p>
<!-- turtle8 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle8 = beditor.editor("""# Turtle8 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
wn = turtle.Screen() 
wn.bgcolor("black") 
skk = turtle.Turtle() 
skk.speed(10)
skk.shape("circle")
skk.color("blue") 
  
def sqrfunc(size): 
    for i in range(4): 
        skk.fd(size) 
        skk.left(90) 
        size = size-5
  
sqrfunc(146) 
sqrfunc(126) 
sqrfunc(106) 
sqrfunc(86) 
sqrfunc(66) 
sqrfunc(46) 
sqrfunc(26) 
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle8" 的按鈕點按時, 執行 Turtle8 物件中的 prog 方法
doc["turtle8"].bind('click', Turtle8.prog)
</script>
</p>
<!-- turtle8 ends -->
<p></p>
<!-- konva1 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Konva1 = beditor.editor("""# Konva1 繪圖
# 引用 https://konvajs.github.io/ 繪圖
from browser import document, html, window
width = 600
height = 400
konva = window.Konva
# Konva 必須在 canvas 繪圖, 從上方設定,  canvas id 為 "container"
stage = konva.Stage.new({
        "container": 'brython_div',
        "width": width,
        "height": height
    })
layer = konva.Layer.new()
rectX = stage.getWidth() / 2 - 50
rectY = stage.getHeight() / 2 - 25
box = konva.Rect.new({
        "x": rectX,
        "y": rectY,
        "width": 100,
        "height": 50,
        "fill": '#00D2FF',
        "stroke": 'black',
        "strokeWidth": 4,
        "draggable": True
    })
def f1():
    document.body.style.cursor = 'pointer'
    
def f2():
    document.body.style.cursor = 'default'
# add cursor styling
box.on('mouseover', f1())
box.on('mouseout', f2())
layer.add(box)
stage.add(layer)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "konva1" 的按鈕點按時, 執行 Konva1 物件中的 prog 方法
doc["konva1"].bind('click', Konva1.prog)
</script>
</p>
<!-- konva1 ends -->
<p></p>
<!-- ycqsort starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ycqsort = beditor.editor("""# Ycombinator quicksort example
Y = lambda f: lambda *args: f(Y(f))(*args)
quicksort = Y(lambda f:
    lambda x: (
        f([item for item in x if item < x[0]])
        + [y for y in x if x[0] == y]
        + f([item for item in x if item > x[0]])
    ) if x else [])
    
print(quicksort([1, 3, 5, 4, 1, 3, 2]))
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ycqsort" 的按鈕點按時, 執行 Ycqsort 物件中的 prog 方法
doc["ycqsort"].bind('click', Ycqsort.prog)
</script>
</p>
<!-- ycqsort ends -->
<p></p>
<!-- ball starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ball = beditor.editor("""# Ggame ball example
from ggame import (
    App, 
    Color, 
    LineStyle, 
    Sprite, 
    RectangleAsset, 
    ImageAsset,
    CircleAsset, 
    EllipseAsset, 
    PolygonAsset,
)
from browser import document as doc
from browser import html
# 引入既有的id="graphics-column" 標註
graphics_column = doc["graphics-column"]
# 建立內定名稱為 "ggame-canvas" 的 canvas 標註
canvas = html.CANVAS(width = 600, height = 100)
canvas.id = "ggame-canvas"
# 將 canvas 插入 gc 標註中
graphics_column <= canvas
# reverse - change the ball direction
def reverse(b):
    b.direction *= -1
# Set up function for handling screen refresh
def step():
    if ball.go:
        ball.x += ball.direction
        if ball.x + ball.width > myapp.width or ball.x < 0:
            ball.x -= ball.direction
            reverse(ball)
myapp = App()
# Three primary colors with no transparency (alpha = 1.0)
red = Color(0xff0000, 1.0)
green = Color(0x00ff00, 1.0)
blue = Color(0x0000ff, 1.0)
black = Color(0x000000, 1.0)
# define colors and line style
green = Color(0x00ff00, 1)
black = Color(0, 1)
noline = LineStyle(0, black)
# a rectangle asset and sprite to use as background
bg_asset = RectangleAsset(canvas.width, canvas.height, noline, green)
bg = Sprite(bg_asset, (0,0))
ball_asset = ImageAsset("/images/orb-150545_640.png")
ball = Sprite(ball_asset, (0, 0))
# Original image is too big. Scale it to 1/10 its original size
ball.scale = 0.1
# custom attributes
ball.direction = 7
ball.go = True
myapp.run(step)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ball" 的按鈕點按時, 執行 Ball 物件中的 prog 方法
doc["ball"].bind('click', Ball.prog)
</script>
</p>
<!-- ball ends -->
<p><button id="keyword">Keyword</button><button id="ex1">Ex1</button><button id="ex2">Ex2</button><button id="ex3">Ex3</button><button id="ex4">Ex4</button><button id="forloop">Ex5</button><button id="guess">Guess</button><button id="autoguess">Autoguess</button><button id="lottery">大樂透</button><button id="weleadlottery">威力彩</button><button id="temp">Temp</button><button id="draw">Draw</button><button id="flag">Flag</button><button id="bezier">Bezier</button><button id="turtle1">Turtle1</button><button id="turtle2">Turtle2</button><button id="turtle3">Turtle3</button><button id="turtle4">Turtle4</button><button id="turtle5">Turtle5</button><button id="turtle6">Turtle6</button><button id="turtle7">Turtle7</button><button id="turtle8">Turtle8</button><button id="konva1">Konva1</button><button id="bunny">Bunny</button><button id="ball">Ball</button><button id="spur">Spur</button><button id="ycqsort">Ycqsort</button><button id="clear">Clear</button></p>
<h4>參考資料:</h4>
<p><a href="/downloads/turtle_intro.pdf">turtle_intro.pdf</a></p>
<p><a href="/downloads/turtle_intro2.pdf">turtle_intro2.pdf</a></p><h1>分組</h1>
<h4>亂數分組:</h4>
<p><a href="https://mde.tw/wcmj2020/downloads/2020spring_wcmj_1a_list.txt">https://mde.tw/wcmj2020/downloads/2020spring_wcmj_1a_list.txt</a> was taken from <a href="https://osa.nfu.edu.tw/">https://osa.nfu.edu.tw/</a> on Feb. 19, 2020.</p>
<p>The most updated list: <a href="http://s1.mde.nfu.edu.tw:8000/?semester=1082&amp;courseno=2418">http://s1.mde.nfu.edu.tw:8000/?semester=1082&amp;courseno=2418</a> </p>
<p>semester: 1082</p>
<p>courseno: 2418</p>
<p>Under https protocol use port 7443, for http use port 8000.</p>
<p>學員名單 URL: <input id="studListUrl" size="70" type="text" value="http://s1.mde.nfu.edu.tw:8000/?semester=1082&amp;courseno=2418 "/><br/> <input id="submit" type="submit" value="開始分組"/><br/> <textarea cols="80" id="output" rows="10"></textarea></p>
<script src="https://mde.tw/wcmj2020/downloads/dart_ex/even_grouping/evenGrouping.js"></script>
<p><a href="https://dartpad.github.io/embed-html.html?gh_owner=mdecourse&amp;gh_repo=cd2020&amp;gh_path=downloads/dart_ex/even_grouping&amp;theme=dark">Dart source code for random grouping</a></p>
<h4>evenGrouping.dart:</h4>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">import 'dart:html';
 
  InputElement studListUrl = querySelector("#studListUrl");
  String studUrl;
  // 將 Label 改為 Textarea, 避免產生過程結果嵌入所在頁面
  TextAreaElement output = querySelector("#output");
 
main() {
  querySelector("#submit").onClick.listen((e) =&gt; grouping());
}
 
grouping() {
  output.innerHtml = "";
 
  if (studListUrl.value != "") {
    studUrl = studListUrl.value;
  } else {
    studUrl = 'https://mde.tw/group/downloads/2019fall_cp_1a_list.txt';
  }
 
  // 組序由 1 開始
  int gth = 1;
  // 迴圈序號變數
  int i;
  int j;
  int total;
  int inc;
  // 每組學員暫存數列
  var gpList = [];
  // 全班分組數列
  var group = [];
  // 各組人數數列
  var numList = [];
  var courseTitle = 'wcmj2020';
 
  HttpRequest.getString(studUrl).then((String resp) {
    // 利用 trim() 去除字串最後的跳行符號, 之後再利用 split() 根據 \n 轉為數列
    var studList = resp.trim().split("\n");
    // 數列利用 shuffle() 方法以隨機方法弄亂順序
    studList.shuffle();
    total = studList.length;
    output.text += "全班總計" + total.toString() + " 人\n";
    numList = getNumList(studList.length);
    inc = 0;
    for (i in numList){
      // 列印區隔符號
      output.text += '=' * 20 + "\n";
      output.text += "group $gth 有 " + i.toString() + " 人: \n";
      gpList = [];
      for (j = 0; j &lt; i; j++){
        output.text += studList[j+inc] + "\n";
        // 在各分組數列中加入將對應的學員學號
        gpList.add(studList[j+inc]);
      }
      gth = gth + 1;
      inc = inc + j;
        //output.text += studList[j] + "\n";
        // 逐步將各組暫存的分組數列加入全班分組數列中
      gpList.sort();
      group.add(gpList);
    }
    // 列出全班分組數列
    output.text += group.toString() + "\n";
    // 列出已經排序後的分組名單
    output.text += '=' * 25 + "\n";
    output.text += '以下為排序後的各組成員名單: \n';
    gth = 1;
    /*
    404231
    s4052
    4062
    s4072
    4082
    5072
    5083
    */
    // 先列出純文字以 \n 跳行組員資料
    for (i=0; i &lt; group.length; i++){
      // 列印區隔符號
      output.text += '=' * 20 + "\n";
      output.text += "group $gth \n";
      gpList = [];
      for (j=0; j &lt; group[i].length; j++){
        output.text += group[i][j] + "\n";
      }
      gth = gth + 1;
    }
    
    gth = 1;
    // 最後列出超文件以 &lt;br\&gt; 跳行組員資料, 包含倉儲與網站
    for (i=0; i &lt; group.length; i++){
      // 列印區隔符號
      output.text += '\n' + '=' * 30 + "&lt;br \&gt;";
      output.text += "group $gth &lt;br \&gt;";
      gpList = [];
      for (j=0; j &lt; group[i].length; j++){
          if (group[i][j].startsWith('4052') || group[i][j].startsWith('4072')) {
              output.text += "Repository: &lt;a href='https://github.com/s" + 
                                      group[i][j] + "/" + courseTitle + "'&gt;" + group[i][j] + 
                                      "&lt;/a&gt;" + " | Site: &lt;a href='https://s" + group[i][j] + 
                                      ".github.io/" + courseTitle + "'&gt;" + group[i][j] + 
                                      "&lt;/a&gt;&lt;br \&gt;";
          }
          else {
              output.text += "Repository: &lt;a href='https://github.com/" + 
                                      group[i][j] + "/" + courseTitle +"'&gt;" + group[i][j] + 
                                      "&lt;/a&gt;" + " | Site: &lt;a href='https://" + group[i][j] + 
                                      ".github.io/" + courseTitle + "'&gt;" + group[i][j] + 
                                      "&lt;/a&gt;&lt;br \&gt;";
          }
      }
      gth = gth + 1;
    }
  });
}
 
List getNumList(int total){
  // total student number
  // int total = 65;
  // initial each group expect to be "eachGrp" number of people
  int eachGrp = 10;
  // may divide into "grpNum" number of group
  int grpNum = total ~/ eachGrp;
  // vacant list
  var splits = [];
  // find remainder when total number divid into "grpNum" number of group
  int remainder = total % grpNum;
  // number of people in one group by calculation
  int calGrp = total ~/ grpNum;
 
  for (int i = 0; i &lt; grpNum; i++) {
    splits.add(calGrp);
  }
  //print(splits);
 
  for (int i = 0; i &lt; remainder; i++) {
    splits[i] += 1;
  }
  //print(splits);
  return splits;
 }</pre>
<h4>index.html:</h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;h1&gt;亂數分組:&lt;/h1&gt;
學員名單 URL: &lt;input type="text" id="studListUrl" size="50" value="https://mde.tw/wcm2020/downloads/2020spring_wcm_1a_list.txt"&gt;&lt;br /&gt;
&lt;input type="submit" value="開始分組" id="submit"&gt;&lt;br /&gt;
&lt;textarea id="output" cols="80" rows="10"&gt;&lt;/textarea&gt;</pre>
<h4>style.css:</h4>
<pre class="brush:css;auto-links:false;toolbar:false" contenteditable="false">body {
  color: white;
  font-size: 20px;
}

input, select, textarea {
font-size: 100%;
}</pre>
<h4>get_student.py</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, request 
from flask_cors import CORS

import requests
import bs4
import ssl

'''
https://s1.mde.nfu.edu.tw:7443/?semester=1082&amp;courseno=0767
cd
2a 1082/0767
2b 1082/0780

2a 1072/0777
2b 1072/0790
2a 1062/0788
2a 1062/0802

wcm
1082/0744

1072/0754
1062/0765

wcmj
1082/2418
'''

app = Flask(__name__)
CORS(app)

@app.route('/studlist')
@app.route('/')
def studlist():
    semester = request.args.get('semester')
    courseno = request.args.get('courseno')
    if semester == None:
        semester = '1082'
    if courseno == None:
        courseno = '0744'
    
    url = 'https://osa.nfu.edu.tw/query/studlist_ajax.php'
    post_var = {'pselyr': semester, 'pseqno': courseno}

    result = requests.post(url, data = post_var)

    soup = bs4.BeautifulSoup(result.content, 'lxml')
    table = soup.find('table', {'class': 'tbcls'})
    data = []
    rows = table.find_all('tr')
    for row in rows:
        cols = row.find_all('td')
        cols = [ele.text.strip() for ele in cols]
        data.append([ele for ele in cols if ele]) # Get rid of empty values
    output = ""
    for i in data[2:]:
        #print(i[0])
        output +=i[0] + "\n"
    return output
    #return  str(pselyr) + " + " +str(pseqno)

# 即使在近端仍希望以 https 模式下執行
context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
context.load_cert_chain('localhost.crt', 'localhost.key')

# 取 flaskapp.py 中的 uwsgi 變數設定
uwsgi = False
if uwsgi:
    # 表示程式在雲端執行
    application = app
else:
    # 表示在近端執行, 以 python3 wsgi.py 執行
    app.run(host='127.0.0.1', port=5443, debug=True, ssl_context=context)
</pre>
<h4>nginx sites-available/default settings:</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">server {
    listen 8000;
    server_name s1.mde.nfu.edu.tw;
    charset utf-8;
    
    listen 7443 ssl;
 
    location /static {
        alias /home/kmol2019/course_studlist/static/;
    }
 
    location / {
        include uwsgi_params;
        uwsgi_pass  127.0.0.1:8087;
    }
    
    ssl_certificate /etc/stunnel/localhost.crt;
    ssl_certificate_key /etc/stunnel/localhost.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}</pre>
<h4>uwsgi7.ini</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[uwsgi]
socket = 127.0.0.1:8087
uid = kmol2019
gid = kmol2019
plugins-dir = /usr/lib/uwsgi/plugins/
plugin = python3
master = true
logto = /var/log/uwsgi/emperor.log
logfile-chown = kmol2019:kmol2019
processes = 4
threads = 2
chdir = /home/kmol2019/course_studlist
wsgi-file = /home/kmol2019/course_studlist/get_student.py</pre>
<h4>/etc/systemd/system/cmsimfly.service</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[Unit]
Description=uWSGI to serve CMSimfly
After=network.target

[Service]
User=kmol2019
Group=kmol2019
WorkingDirectory=/home/kmol2019/uwsgi_ini
ExecStart=/usr/local/bin/uwsgi --emperor /home/kmol2019/uwsgi_ini

[Install]
WantedBy=multi-user.target</pre><h2>分組結果</h2>
<p>各分組學員可以就以下常見的網際內容, 以組員分工的方式深入研究特定主題, 然後再將結果納入 CMSiMDE 網站, 網誌, 簡報 與 Blogger 網誌內容.</p>
<h4>常見的網際內容包含:</h4>
<p style="padding-left: 30px;">文字 (網誌與網站文字說明, 簡報文字敘述)</p>
<p style="padding-left: 30px;">數學方程式 (<a href="https://www.mathjax.org/">mathjax</a>)</p>
<p style="padding-left: 30px;">圖檔 (png, jpg, gif, <a href="https://www.w3schools.com/html/html5_svg.asp">svg)</a></p>
<p style="padding-left: 30px;">動畫 (gif) <img caption="false" height="72" src="/images/rabbit.gif" width="100"/></p>
<p style="padding-left: 30px;">音樂 (mp3 or <a href="https://docstore.mik.ua/orelly/web2/audio/ch10_02.htm">midi</a>)</p>
<p style="padding-left: 30px;">影片 (embedded mp4)</p>
<p style="padding-left: 30px;">程式</p>
<p style="padding-left: 60px;"><a href="https://www.w3schools.com/html/html5_canvas.asp">HTML5 Canvas</a> (2d)</p>
<p style="padding-left: 60px;"><a href="https://threejs.org/">Three.js</a> (3D)</p>
<p style="padding-left: 60px;"><a href="https://brython.info/">Brython</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/fengari-lua/fengari-web">fengari-web</a> (Lua)</p>
<p style="padding-left: 60px;">Dart -&gt; Javascript</p>
<p>==============================<br/>group 1 <br/>Repository: <a href="https://github.com/50833110/wcmj2020">50833110</a> | Site: <a href="https://50833110.github.io/wcmj2020">50833110</a><br/>Repository: <a href="https://github.com/50833112/wcmj2020">50833112</a> | Site: <a href="https://50833112.github.io/wcmj2020">50833112</a><br/>Repository: <a href="https://github.com/50833115/wcmj2020">50833115</a> | Site: <a href="https://50833115.github.io/wcmj2020">50833115</a><br/>Repository: <a href="https://github.com/50833123/wcmj2020">50833123</a> | Site: <a href="https://50833123.github.io/wcmj2020">50833123</a><br/>Repository: <a href="https://github.com/50833127/wcmj2020">50833127</a> | Site: <a href="https://50833127.github.io/wcmj2020">50833127</a><br/>Repository: <a href="https://github.com/50833128/wcmj2020">50833128</a> | Site: <a href="https://50833128.github.io/wcmj2020">50833128</a><br/>Repository: <a href="https://github.com/50833129/wcmj2020">50833129</a> | Site: <a href="https://50833129.github.io/wcmj2020">50833129</a><br/>Repository: <a href="https://github.com/50833131/wcmj2020">50833131</a> | Site: <a href="https://50833131.github.io/wcmj2020">50833131</a><br/>Repository: <a href="https://github.com/50833133/wcmj2020">50833133</a> | Site: <a href="https://50833133.github.io/wcmj2020">50833133</a><br/>Repository: <a href="https://github.com/50833138/wcmj2020">50833138</a> | Site: <a href="https://50833138.github.io/wcmj2020">50833138</a><br/> ==============================<br/>group 2 <br/>Repository: <a href="https://github.com/50833101/wcmj2020">50833101</a> | Site: <a href="https://50833101.github.io/wcmj2020">50833101</a><br/>Repository: <a href="https://github.com/50833107/wcmj2020">50833107</a> | Site: <a href="https://50833107.github.io/wcmj2020">50833107</a><br/>Repository: <a href="https://github.com/50833108/wcmj2020">50833108</a> | Site: <a href="https://50833108.github.io/wcmj2020">50833108</a><br/>Repository: <a href="https://github.com/50833111/wcmj2020">50833111</a> | Site: <a href="https://50833111.github.io/wcmj2020">50833111</a><br/>Repository: <a href="https://github.com/50833117/wcmj2020">50833117</a> | Site: <a href="https://50833117.github.io/wcmj2020">50833117</a><br/>Repository: <a href="https://github.com/50833119/wcmj2020">50833119</a> | Site: <a href="https://50833119.github.io/wcmj2020">50833119</a><br/>Repository: <a href="https://github.com/50833122/wcmj2020">50833122</a> | Site: <a href="https://50833122.github.io/wcmj2020">50833122</a><br/>Repository: <a href="https://github.com/50833126/wcmj2020">50833126</a> | Site: <a href="https://50833126.github.io/wcmj2020">50833126</a><br/>Repository: <a href="https://github.com/50833130/wcmj2020">50833130</a> | Site: <a href="https://50833130.github.io/wcmj2020">50833130</a><br/>Repository: <a href="https://github.com/50833134/wcmj2020">50833134</a> | Site: <a href="https://50833134.github.io/wcmj2020">50833134</a><br/> ==============================<br/>group 3 <br/>Repository: <a href="https://github.com/50833104/wcmj2020">50833104</a> | Site: <a href="https://50833104.github.io/wcmj2020">50833104</a><br/>Repository: <a href="https://github.com/50833106/wcmj2020">50833106</a> | Site: <a href="https://50833106.github.io/wcmj2020">50833106</a><br/>Repository: <a href="https://github.com/50833113/wcmj2020">50833113</a> | Site: <a href="https://50833113.github.io/wcmj2020">50833113</a><br/>Repository: <a href="https://github.com/50833114/wcmj2020">50833114</a> | Site: <a href="https://50833114.github.io/wcmj2020">50833114</a><br/>Repository: <a href="https://github.com/50833116/wcmj2020">50833116</a> | Site: <a href="https://50833116.github.io/wcmj2020">50833116</a><br/>Repository: <a href="https://github.com/50833118/wcmj2020">50833118</a> | Site: <a href="https://50833118.github.io/wcmj2020">50833118</a><br/>Repository: <a href="https://github.com/50833120/wcmj2020">50833120</a> | Site: <a href="https://50833120.github.io/wcmj2020">50833120</a><br/>Repository: <a href="https://github.com/50833125/wcmj2020">50833125</a> | Site: <a href="https://50833125.github.io/wcmj2020">50833125</a><br/>Repository: <a href="https://github.com/50833140/wcmj2020">50833140</a> | Site: <a href="https://50833140.github.io/wcmj2020">50833140</a><br/>Repository: <a href="https://github.com/50833141/wcmj2020">50833141</a> | Site: <a href="https://50833141.github.io/wcmj2020">50833141</a><br/> ==============================<br/>group 4 <br/>Repository: <a href="https://github.com/50833102/wcmj2020">50833102</a> | Site: <a href="https://50833102.github.io/wcmj2020">50833102</a><br/>Repository: <a href="https://github.com/50833103/wcmj2020">50833103</a> | Site: <a href="https://50833103.github.io/wcmj2020">50833103</a><br/>Repository: <a href="https://github.com/50833105/wcmj2020">50833105</a> | Site: <a href="https://50833105.github.io/wcmj2020">50833105</a><br/>Repository: <a href="https://github.com/50833109/wcmj2020">50833109</a> | Site: <a href="https://50833109.github.io/wcmj2020">50833109</a><br/>Repository: <a href="https://github.com/50833121/wcmj2020">50833121</a> | Site: <a href="https://50833121.github.io/wcmj2020">50833121</a><br/>Repository: <a href="https://github.com/50833124/wcmj2020">50833124</a> | Site: <a href="https://50833124.github.io/wcmj2020">50833124</a><br/>Repository: <a href="https://github.com/50833135/wcmj2020">50833135</a> | Site: <a href="https://50833135.github.io/wcmj2020">50833135</a><br/>Repository: <a href="https://github.com/50833136/wcmj2020">50833136</a> | Site: <a href="https://50833136.github.io/wcmj2020">50833136</a><br/>Repository: <a href="https://github.com/50833137/wcmj2020">50833137</a> | Site: <a href="https://50833137.github.io/wcmj2020">50833137</a><br/>Repository: <a href="https://github.com/50833139/wcmj2020">50833139</a> | Site: <a href="https://50833139.github.io/wcmj2020">50833139</a></p><h2>實習項目</h2>
<h4>第八週</h4>
<p style="padding-left: 30px;">請重新下載 <a href="https://drive.google.com/open?id=1xDTDfcHU18ipqZNbOufMkSZqibqNeL2T">wcmj2020_tool.7z</a>, 檔案大小為 435 MB, 解開壓縮後為 1.8 GB (其中包括 Mypaint, Dia 與 OBS 等)</p>
<p style="padding-left: 30px;">分別利用 ShareX 與 OBS 錄製電腦畫面操作, 說明如何在個人的網站上新增一個標題為"第八週實習"的 H1 頁面, 然後將兩段影片上傳至個人的 youtube 帳號下, 並 embedded 至該頁面中.</p>
<h4>第九週</h4>
<p style="padding-left: 30px;">請從電腦與網路頁面中, 擷取資料中的圖文資料, 在標題為"第九週實習“的 H1 頁面下, 分別製作兩個 H2 頁面:</p>
<p style="padding-left: 30px;">電腦軟硬體簡介</p>
<p style="padding-left: 30px;">與</p>
<p style="padding-left: 30px;">網路架構與設定簡介</p>
<p style="padding-left: 30px;">請各組員將執行上述操作的過程, 以 Google Handout Meet 會議中的錄製功能, 拍攝成 Ｇoogle Drive 上的影片後, 將該影片的分享設置為可以讓所有 @gm 群組者, 透過 URL 在線觀看.</p>
<p style="padding-left: 30px;">然後至 <a href="https://forms.gle/T1Vs4sv9EdetxoWF7">https://forms.gle/T1Vs4sv9EdetxoWF7</a> 完成自評表單的填寫.</p>
<p style="padding-left: 30px;"></p>
<p></p><h1>主題</h1>
<h4>Google Blogger</h4>
<p>Login to your gm email account and download <a href="https://drive.google.com/file/d/12Ypf02FVP9l7a9ufZfhRicN-rzCKkAf5/view?usp=sharing">2010_BeginningGoogleBlogger.pdf</a></p>
<h4>WCM</h4>
<p>Login to your gm email account and download<span> </span><a href="https://drive.google.com/file/d/1gLb9_6FEv58wVX2uShG_3sgUseFEcH_y/view?usp=sharing">2020wcm_topic_1.pdf</a>.</p>
<p style="padding-left: 30px;">What is a content management system?</p>
<p style="padding-left: 30px;">Analyzing your information life cycle.</p>
<p style="padding-left: 30px;">Overview of enterprise content management.</p>
<h4><span>Git</span></h4>
<p><span>Login to your gm email account and download<span> </span><a href="https://drive.google.com/file/d/1YkLWsDVRlScSuSBQv2Aa1JSjvbydJli-/view?usp=sharing">IntroductionToVersionControlAndGit.pdf</a>.</span></p>
<p style="padding-left: 30px;"><span>What is version control?</span></p>
<p style="padding-left: 30px;"><span>Git installation and setup.</span></p>
<p style="padding-left: 30px;"><span>Git getting started.</span></p>
<p style="padding-left: 30px;"><span>Commits and remote git.</span></p>
<h4><span>Github</span></h4>
<p><span>Login to your gm email account and download<span> </span><a href="https://drive.google.com/file/d/1vnkDLW1cg8hKEMUdjDstvWqiS4R1n3IC/view?usp=sharing">GithubPrimer.pdf</a></span></p>
<p><span>Login to your gm email account and download<span> </span><a href="https://drive.google.com/file/d/18MiM_d95ustohAqoUfx-gc-2dUE9Av0n/view?usp=sharing">ConflictsGUIToolAdvGit.pdf</a></span></p><h2>倉儲與網站</h2>
<ol>
<li>請重新下載 <a href="https://drive.google.com/open?id=1xDTDfcHU18ipqZNbOufMkSZqibqNeL2T">wcmj2020_tool.7z</a>, 檔案大小為 435 MB, 解開壓縮後為 1.8 GB (其中包括 Mypaint, Dia 與 OBS 等).</li>
<li>登入 github.com 建立 Github 倉儲, 直接新增 README.md 檔案.</li>
<li>將所建立的倉儲 git clone 到近端.</li>
<li>git submodule add <a href="https://github.com/mdecourse/cmsimde.git">https://github.com/mdecourse/cmsimde.git</a> cmsimde</li>
<li>在近端維護動態網站, 轉為靜態後 git add commit push</li>
</ol>
<p>以下請各學員分別利用 ShareX 與 OBS 拍攝建立與維護個人倉儲與網站的影片, 完成後將影片 embed 入個人網站的 W8 頁面中.</p>
<h3>以 SSH 維護倉儲</h3>
<h4>W10 - W11</h4>
<p>由於在電腦教室時採用純 IPv6 協定上網, 因此為了能夠在近端將倉儲改版資料推送到目前只接受 IPv4 協定連線的 github, 以下除了將原本以 https 對 github 連線, 改為以 ssh 協定連線外, 在 Windows 環境下必須利用 putty 與 plink, 設定 putty 格式的 .ppk 以及能夠同時支援 IPv4 與 IPv6 的代理主機.</p>
<p>設定步驟如下:</p>
<p>1. 下載 Putty 工具組</p>
<p style="padding-left: 30px;"><span>從 </span><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/" rel="nofollow">https://www.chiark.greenend.org.uk/~sgtatham/putty/</a><span><span> </span>下載一般版, 或從<span> </span></span><a href="http://jakub.kotrla.net/putty/" rel="nofollow">http://jakub.kotrla.net/putty/</a><span><span> </span>下載特殊的可攜版本.</span></p>
<p><span>2. 利用 y:\portablegit\bin\sh.exe 進入 shell 命令環境後, 以 </span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"> ssh-keygen -t rsa -b 4096 -C "使用者學號"</pre>
<p style="padding-left: 30px;">在 /y/home/.ssh 目錄下建立 id_rsa 與 id_rsa.pub 等 private key 與 public key</p>
<p style="padding-left: 30px;">之後以 SciTE 開啟 id_rsa.pub 後, 將此 public key 的內容, 以新增添加到 Github.com 帳號下 personal settings -&gt; SSH and GPG keys 頁面下.</p>
<p>3. 接下來要利用 puttygen.exe 將 id_rsa 轉為 Putty 可以解讀的 .ppk 格式, 並修改隨身系統的啟動批次檔案, 指定利用 putty 目錄下的 plink 執行 git 指令的網路代理設定.</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">修改啟動的 start.bat 加入下列設定:

set GIT_HOME=%Disk%:\portablegit\bin\
set GIT_SSH=%Disk%:\putty\plink.exe</pre>
<p>4. 利用 puttygen.exe 載入第二步驟所建立的 private key, 也就是 id_rsa.</p>
<p>開啟 puttygen 之後, 以右下方的 load 載入 id_rsa, 成功載入後, 利用 save private key 按鈕, 將已經轉為 putty 格式的 .ppk 存檔. 此一 .ppk 檔案必須在設定 putty 中 github.com session 時, 在 Connection-&gt;SSH-&gt;Auth 項目下, 將轉檔後的 .ppk 指向 private key file for authentication 欄位. </p>
<p>並在 Connection-&gt;Proxy 項目下, 指定 Proxy type: HTTP, 並將 IPv6 代理主機設為 ::53 或 ::42 埠號設為 3128.</p>
<p>5. 之後確定 home 下的 .ssh 目錄中的 config 設定檔案為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># no proxy at home
#ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.mde.nfu.edu.tw:3128 %h %p
# set git_ssh=y:/putty/plink.exe with auth under putty github.com session setup
ProxyCommand y:/putty/plink.exe github.com %h %p
 
Host github.com
    User git
    Port 22
    Hostname github.com
    
    # for connect.exe need openssh key format
    #IdentityFile "y:\home\.ssh\id_rsa_mdecourse"
    # for plink.exe need rsa key format but set under putty github.com session
    # plink.exe do not need the following setting
    #IdentityFile "y:\home\.ssh\mdecourse_putty_private.ppk"
 
    TCPKeepAlive yes
    IdentitiesOnly yes
</pre>
<p>6. 最後再將 wcmj2020 倉儲中 .git 目錄下的 config 檔案中的連線協定, 由 https 改為採 ssh 連線: 範例如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[submodule]
	active = .
[remote "origin"]
	#url = https://github.com/mdecourse/wcmj2020.git
    url = git@github.com:mdecourse/wcmj2020.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master
[submodule "cmsimde"]
	url = https://github.com/mdecourse/cmsimde.git</pre>
<p>之後就可以透過近端的 .ppk private key 與 Github.com 上的 public key 對應, 無需輸入帳號密碼就可以進行 git push.</p>
<p><a href="https://drive.google.com/file/d/1VNBHNMXS1-wG7oaKDCpG5p3khsffB7oa/view?usp=sharing">W10 以 ssh 對倉儲連線設定說明影片</a> (登入 @gm 帳號後觀看)</p><h2>繪圖</h2>
<p><a href="https://github.com/mypaint/mypaint">https://github.com/mypaint/mypaint</a></p>
<p><a href="https://github.com/mypaint/mypaint/wiki/v1.2-User-Manual">https://github.com/mypaint/mypaint/wiki/v1.2-User-Manual</a></p>
<p><a href="/downloads/MyPaint筆刷說明.pdf">Mypaint筆刷說明.pdf</a></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/gblZFCPOazc" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/4iigGPzdg7s" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/9NDuiP17GnA" width="560"></iframe></p><h2>W6-W9</h2>
<h4>Online education</h4>
<p>線上直播: Youtube + Portable OBS</p>
<p>線上開會: <a href="https://meet.google.com">https://meet.google.com</a> </p>
<hr/>
<h4>讓手機可以利用電腦熱點上網</h4>
<p>採用 <a href="https://www.tp-link.com/us/home-networking/usb-adapter/tl-wn725n/">https://www.tp-link.com/us/home-networking/usb-adapter/tl-wn725n/</a></p>
<p>將此一 USB Wifi adapter 連接電腦後, 若網路為 IPv4 協定時, 可以透過"設定 -&gt; 網路和網際網路 -&gt; 行動熱點", 選擇開啟並編輯"網路名稱與網路密碼"後, 讓至多 8 台手機透過熱點連線上網.</p>
<p>但是因為目前 Windows 10 並<a href="https://answers.microsoft.com/en-us/windows/forum/all/support-ipv6-in-mobile-hotspot-network-sharing/8801ea57-c6dc-4c10-afe6-192879a85835">未提供 IPv6 網路協定下的網路熱點功能</a>, 因此在純 IPv6 網路協定下無法使用"行動熱點"服務.</p>
<hr/>
<p>利用手機鏡頭當作 webcam:</p>
<p>Android: <a href="https://www.digitalcitizen.life/turn-android-smartphone-webcam-windows">https://www.digitalcitizen.life/turn-android-smartphone-webcam-windows</a> <br/>iPhone: <a href="https://www.makeuseof.com/tag/use-your-iphone-as-a-webcam-heres-how-ios/">https://www.makeuseof.com/tag/use-your-iphone-as-a-webcam-heres-how-ios/</a> </p>
<hr/>
<h4>需要 clone 個人倉儲時:</h4>
<p style="padding-left: 30px;">git clone --recurse-submodules 倉儲_url.git</p>
<p>例如: git clone --recurse-submodules <a href="https://github.com/mdecourse/wcmj2020.git">https://github.com/mdecourse/wcmj2020.git</a></p>
<h4>現場直播的 audio 錄音設定</h4>
<p>在電腦輔助設計室進行直播時, 由於現場有擴音設備, 因此採用 OBS 串流至 Youtube 的最佳收音並非從 Webcam 的麥克風, 而是從擴音器以 audio outpu 連接到電腦的麥克風插槽, 然後將 OBS 的 audio 設定為從電腦的麥克風收音.</p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/5qTYqHULS7A" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/xYZLwLaUG6U" width="560"></iframe></p>
<h4>W7</h4>
<h4>下載可攜程式系統</h4>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/IOauashmKho" width="560"></iframe></p>
<h4>利用 git 指令建立 cmsimde 網站</h4>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/NJTQulLMXnU" width="560"></iframe></p>
<h4>W8</h4>
<p>請重新下載 <a href="https://drive.google.com/open?id=1xDTDfcHU18ipqZNbOufMkSZqibqNeL2T">wcmj2020_tool.7z</a>, 檔案大小為 435 MB, 解開壓縮後為 1.8 GB (其中包括 Mypaint, Dia 與 OBS 等).</p>
<p>學會利用 ShareX 與 OBS 拍攝螢幕操作影片, 並將個人維護倉儲與網站的過程影片放入個人網站中.</p>
<h4>W9</h4>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1mqtHKdD2EDJjUvfs76T1-Cs0OwXVJtvO/view?usp=sharing">wcmj2020 W9 第一段影片</a></p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1mSFCPGNaO_DYAjOA-C2QL1HessDL0R4H/view?usp=sharing">wcmj2020 W9 第二段影片</a></p>
<h2>W12-W13</h2>
<h4>W12</h4>
<p style="padding-left: 30px;"><a href="https://drive.google.com/open?id=1d_YpSrTdKLPKZjkHW2TNsbHRU1ePNRFl">Leo Editor 與 Pelican blog 使用說明影片</a></p>
<h4>W13</h4>
<p style="padding-left: 30px;">Pelican Blog 內容與 Google Blogger 同步</p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/open?id=1vpNOyew4ts78nuJ50-CiE26WSk0YxOV7">W13  利用 Leo Editor 按鈕處理同步說明影片</a></p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/open?id=1I5fLwnRSeDPaSdXkrartxERICHKgmD20">教學影片-2</a></p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/open?id=1hqD5j0H37OWb2k4PQAcQ5aFPAzJrnBQB">教學影片-3</a></p>
<p style="padding-left: 30px;">利用 Windows 10 設定 -&gt; 選擇預設網頁瀏覽器, 使用 Google Chrome 作為預設瀏覽器.</p>
<p style="padding-left: 30px;">隨身程式系統必須安裝 <span>google-api-python-client 與 oauth2client</span><br/> <br/> pip install google-api-python-client oauth2client<br/> <br/>OAuth 2.0 client IDs 程式類別可以選擇 Desktop app<br/> <br/>使用者完成 client_secrets.json 設定後, 必須將檔案存在倉儲目錄外部</p>
<p>將 client_secrets.json 轉為 credential_token.dat 的程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">@language python
# https://developers.google.com/blogger/docs/3.0/using
# under Mac command + b to execute
import pickle
import os
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow


SCOPES = ['https://www.googleapis.com/auth/blogger', ]

# we check if the file tBo store the credentials exists
if not os.path.exists('./../../yen_gm_blogger_token.dat'):

    flow = InstalledAppFlow.from_client_secrets_file('./../../yen_gm_blogger_secrets.json', SCOPES)
    credentials = flow.run_local_server()

    with open('./../../yen_gm_blogger_token.dat', 'wb') as credentials_dat:
        pickle.dump(credentials, credentials_dat)
else:
    with open('./../../yen_gm_blogger_token.dat', 'rb') as credentials_dat:
        credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)
g.es(service)</pre>
<p>add_to_blogger 按鈕內容:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">@language python
from markdown import markdown
from oauth2client import client
#from googleapiclient import sample_tools
import os
# 配合使用 credential token
import pickle
from googleapiclient.discovery import build
#from google_auth_oauthlib.flow import InstalledAppFlow
#from google.auth.transport.requests import Request

os.environ['TZ'] = 'Asia/Taipei'
with open('./../../blogger_credentials.dat', 'rb') as credentials_dat:
    credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)

try:
    '''
    users = service.users()
    # 取得使用者 profile 資料
    user = users.get(userId='self').execute()
    print('網誌名稱: %s' % user['displayName'])
    '''
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    # post_id is now blogs["items"][0]["id"]
    blog_id = blogs["items"][0]["id"]
    #for blog in blogs['items']:
        #print(blog['name'], blog['url'])
    posts = service.posts()
    # 新增網誌 post 時, 需要 post_id
    body = {
    "kind": "blogger#post",
    "id": blog_id,
    "title": title,
    # 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容
    "content": content,
    "labels": tags
    }
    insert = posts.insert(blogId=blog_id, body=body)
    posts_doc = insert.execute()
    post_id = posts_doc["id"]
    #print(posts_doc)
    # 改用 credential token 後不會產生 blogger.dat
    #os.remove("blogger.dat")
    # 利用最後的 child 節點來儲存 post_id
    to_save_post_id = p.insertAsLastChild()   
    # 改為內文為空的節點, id 直接標在 head 標題 
    to_save_post_id.b = ""
    to_save_post_id.h = post_id
    # 因為新增節點, commander 必須 redraw
    c.redraw()
    g.es("post_id 為", post_id)
    g.es("已經將資料送往 Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")

</pre>
<p>edit_to_blogger 按鈕內容:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">@language python
from markdown import markdown
from oauth2client import client
#from googleapiclient import sample_tools
import os
# 配合使用 credential token
import pickle
from googleapiclient.discovery import build
#from google_auth_oauthlib.flow import InstalledAppFlow
#from google.auth.transport.requests import Request

os.environ['TZ'] = 'Asia/Taipei'
with open('./../../blogger_credentials.dat', 'rb') as credentials_dat:
    credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)

try:
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    blog_id = blogs["items"][0]["id"]
    # 設法取得原 post 的 id
    postid_outline = p.getLastChild()
    # 直接從標題取得 post 的 id 號碼
    post_id = postid_outline.h
    posts = service.posts()
    # 更新網誌文章時的 body
    body = {
    "kind": "blogger#post",
    "title": title,
    "content": content
    }
    # need to save postId to outline head
    update = posts.update(blogId=blog_id, postId=post_id, body=body, publish=True)
    update_doc = update.execute()
    # 使用 credential token 後, 無需刪除 blogger.dat
    #os.remove("blogger.dat")
    g.es("post_id 為", post_id)
    g.es("已經將更新資料送往 Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")
</pre><h3>Blogger API</h3>
<p>基本概念:</p>
<p style="padding-left: 30px;">1. 這裡所指的 Blogger API 為: <a href="https://developers.google.com/blogger/docs/3.0/using">https://developers.google.com/blogger/docs/3.0/using</a></p>
<p style="padding-left: 30px;">2. 將 CMSiMDE 中的 Pelican Blog 內容同步到 Google Blogger 的目的, 在讓網際內容管理系統中的網誌原始資料修改過程具備版次, 而且可同時將網誌出版在 Github Pages 與 Google Blogger 中, 讓網際內容的保存較具有永續性.</p>
<p style="padding-left: 30px;">3. Google Blogger 中的網誌系統各有獨立 ID, 這裡稱為 blog_id, 而網誌中的每一篇文章各有獨立 ID, 這裡稱為 post_id.</p>
<p style="padding-left: 30px;">4. Google Blogger 管理者登入後, 在 Settings - Permissions 項下, 允許 invite more authors, 而且在 Settings - Permissions - Blog admins and Authors 項下, 允許將所邀請共同寫作的 Author 提升為 Admin 管理者.</p>
<p style="padding-left: 30px;">5. Google 的每一個 API 都允許使用者建立以 Oauth2 為基礎的登入使用授權憑證, 配合所啟動的各種 API 程式庫, 一旦啟用並登入後, 可以透過程式方法, 呼叫程式庫功能, 對各種 Google 所提供的服務 (Blogger, Drive, Gmail, Calendar 等) 新增內容. 以 Blogger 而言, 只要使用者被設為某一網誌的共同作者, 即擁有在該網誌新增或編輯自己所發布的網誌文章權限.</p>
<p style="padding-left: 30px;">6. 使用者登入 Google 帳號後, 在 <a href="https://console.developers.google.com">https://console.developers.google.com</a> 中所建立的 Oauth2 client ID, 可以下載存為 client_secrets.json 檔案.</p>
<p style="padding-left: 30px;">7. client_secrets.json 檔案則可以透過下列程式, 轉換為 credential_token.dat, 使用者針對特定啟用的 API 程式庫, 可以在讀取 credential_token.dat 的情況下, 取得與登入 Gmail 帳號相同的使用授權, 直接在擁有權限的 blog_id 中新增特定的文章 (並以特定的 post_id 辨識).</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">@language python
# https://developers.google.com/blogger/docs/3.0/using
# under Mac command + b to execute
import pickle
import os
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow


SCOPES = ['https://www.googleapis.com/auth/blogger', ]

# we check if the file tBo store the credentials exists
if not os.path.exists('./../../yen_gm_blogger_token.dat'):

    flow = InstalledAppFlow.from_client_secrets_file('./../../yen_gm_blogger_secrets.json', SCOPES)
    credentials = flow.run_local_server()

    with open('./../../yen_gm_blogger_token.dat', 'wb') as credentials_dat:
        pickle.dump(credentials, credentials_dat)
else:
    with open('./../../yen_gm_blogger_token.dat', 'rb') as credentials_dat:
        credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)
g.es(service)</pre>
<p style="padding-left: 30px;"></p><h2>W14</h2>
<p style="padding-left: 30px;">從 <a href="https://2019wcm.blogspot.com/2019/03/posted-via-python.html">https://2019wcm.blogspot.com/2019/03/posted-via-python.html</a> 取得Google Blogger Python API 程式, 修改後執行, 測試是否可以讀取設定的 client_secrets.json, 在各自的 Blogger ID 與 Post ID 中新增或修改網誌文章.</p>
<p style="padding-left: 60px;"><a href="https://drive.google.com/open?id=13KBfWIMULL9fAPw-T54cExMt9GUTW4XZ">以 Blogger Python API 程式修改文章的教學影片</a> (for @gm users only)</p>
<hr/>
<p>直接在操作系統建立網際內容管理合用系統</p>
<p>Windows 10 64 位元操作系統</p>
<p style="padding-left: 30px;">安裝 Python 3.8.3 與 pip</p>
<p style="padding-left: 60px;">至 <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a> 下載 Python 3.8.3<span> </span><a href="https://www.python.org/ftp/python/3.8.3/python-3.8.3-amd64.exe">Windows x86-64 executable installer</a></p>
<p style="padding-left: 60px;">可以直接選擇安裝 pip 與所有選項內容</p>
<p style="padding-left: 30px;">安裝 Git</p>
<p style="padding-left: 60px;">利用 <a href="https://github.com/git-for-windows/git/releases/download/v2.26.2.windows.1/Git-2.26.2-64-bit.exe">64-bit Git for Windows Setup</a> 安裝 Git 工具.</p>
<p style="padding-left: 30px;">安裝 CMSiMDE 所需模組</p>
<p style="padding-left: 60px;">利用 cmd 開啟命令列視窗, 以 pip 安裝 flask flask_cors lxml bs4 markdown pelican leo 等模組</p>
<p style="padding-left: 90px;">pip install <span> flask flask_cors lxml bs4 markdown pelican leo</span></p>
<p>Ubuntu 20.04 操作系統 (請下載<a href="https://drive.google.com/open?id=13Gqwyj0CGR6wa9dZg_BmlCLv5cNYWQJ_"> W12 Virtualbox 虛擬主機檔案</a>)</p>
<p style="padding-left: 30px;">Ubuntu 20.04 同時存在 Python 2.7 與 Python 3.8.2,  CMSiMDE 只相容於 Python 3.8.2, 因此啟動指令必須使用:</p>
<p style="padding-left: 60px;">python3 wsgi.py</p>
<p style="padding-left: 60px;">與 </p>
<p style="padding-left: 60px;">pip3 install <span> flask flask_cors lxml bs4 markdown pelican leo</span></p>
<p>Mac OS X 操作系統</p>
<p style="padding-left: 30px;">與 Ubuntu 20.04 類似.</p><h3>新增 blogger 文章</h3>
<h4>w14_blogger_add_1.py</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
用來測試 Google Blogger Python API 新增文章程式

pip install google-api-python-client oauth2client

'''

import sys
from oauth2client import client
from googleapiclient import sample_tools

argv = ""
# 認證並建立服務
service, flags = sample_tools.init(
  argv, 'blogger', 'v3', __doc__, './client_secrets.json',
  scope='https://www.googleapis.com/auth/blogger')

try:
    users = service.users()
    # 取得使用者 profile 資料
    user = users.get(userId='self').execute()
    print('網誌名稱: %s' % user['displayName'])
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    for blog in blogs['items']:
        print(blog['name'], blog['url'])
    posts = service.posts()
    # 新增網誌 post 時, 需要 blog id

    body = {
    "kind": "blogger#post",
    "id": "123",
    "title": "透過 Python 程式新增網誌文章1",
    "content":"使用 Google Blogger API 可以利用程式新增網誌文章內容1"
    }
    
    insert = posts.insert(blogId='123', body=body)
    posts_doc = insert.execute()
    print(posts_doc)
    
    '''
    # 更新網誌文章時的 body
    body = {
    "kind": "blogger#post",
    "title": "透過 Python 程式修改網誌文章2",
    "content": "使用 Google Blogger API 可以利用程式修改網誌文章內容. http://mde.tw/cd2019"
    }
    
    update = posts.update(blogId="123", postId="456", body=body, publish=True)
    update_doc = update.execute()
    print(update_doc)
    '''
except(client.AccessTokenRefreshError):
    print("error")
    </pre>
<h3>編輯 Blogger 文章</h3>
<h4>w14_blogger_edit_1.py</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
用來測試 Google Blogger Python API 編輯文章程式

pip install google-api-python-client oauth2client

'''

import sys
from oauth2client import client
from googleapiclient import sample_tools

argv = ""
# 認證並建立服務
service, flags = sample_tools.init(
  argv, 'blogger', 'v3', __doc__, './client_secrets.json',
  scope='https://www.googleapis.com/auth/blogger')

try:
    users = service.users()
    # 取得使用者 profile 資料
    user = users.get(userId='self').execute()
    print('網誌名稱: %s' % user['displayName'])
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    for blog in blogs['items']:
        print(blog['name'], blog['url'])
    posts = service.posts()
    # 新增網誌 post 時, 需要 blog id

    '''
    body = {
    "kind": "blogger#post",
    "id": "123",
    "title": "透過 Python 程式新增網誌文章1",
    "content":"使用 Google Blogger API 可以利用程式新增網誌文章內容1"
    }
    
    insert = posts.insert(blogId='123', body=body)
    posts_doc = insert.execute()
    print(posts_doc)
    '''

    # 更新網誌文章時的 body
    body = {
    "kind": "blogger#post",
    "title": "透過 Python 程式修改網誌文章2",
    "content": "使用 Google Blogger API 可以利用程式修改網誌文章內容. http://mde.tw/cd2019"
    }
    
    update = posts.update(blogId="123", postId="456", body=body, publish=True)
    update_doc = update.execute()
    print(update_doc)

except(client.AccessTokenRefreshError):
    print("error")
    </pre>
<h3>MacBook 操作指南</h3>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="https://drive.google.com/open?id=1zIJkMnFNb0QYsBbzlxAvw8t7hZdZc0hh">Mac OS X for Absolute Beginners.pdf</a> (for @gm users only)</p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/open?id=1hl53RvI1sPFDuF63_TvjuuS-9y9ZQiO3">Learn C on the Mac.pdf</a> (for @gm users only)</p>
<p>這裡以 MacBook Air 2012 年出廠, 硬體規格:</p>
<p style="padding-left: 30px;">macOS Catalina Version 10.15.4</p>
<p style="padding-left: 30px;">1.8 GHz Dual-Core Intel Core i5</p>
<p style="padding-left: 30px;">Memory $GB 1600 MHz DDR3</p>
<p style="padding-left: 30px;">Graphics Intel HD Graphics 4000 1536 MB</p>
<p>的操作為例, 如何存活在機械設計工程系與精密機械工程科的網際內容管理課程.</p>
<p>由於網際內容管理課程主要以 Ｗindows 10 64 位元操作系統中的 Python 3 可攜程式環境使用為主.</p>
<h4>從官方網站下載安裝 Python3</h4>
<p>因此 Catalina 系統中的首要任務, 便是安裝 Python 3:</p>
<p>在 2020.05.15 從 <a href="https://www.python.org/downloads/mac-osx/">https://www.python.org/downloads/mac-osx/</a> 可以下載安裝最新的 Python 3.8.3 解譯環境.</p>
<h4>安裝 pip3</h4>
<p>有了 python 3 環境之後, 就可以從 Lanuchpad -&gt; Other -&gt; Terminal 開啟終端機, 並從 get-pip.py 下載用來安裝 pip3 的程式碼, 以終端機上的指令進行安裝:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">sudo python3 get-pip.py</pre>
<p>安裝 pip3 之後, 可以安裝 CMSiMDE 所需的 flask, flask_cors, lxml, bs4, markdown, pelican 以及 leo:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">sudo pip3 install flask flask_cors lxml bs4 markdown pelican leo</pre>
<h4>安裝 XQuartz</h4>
<p>之後, 就可以安裝 <a href="https://www.xquartz.org/">XQuartz</a>, 以便使用 xterm 替代 terminal.</p>
<p>接下來假如要使用 SciTE 作為文字編輯器, 建議透過 <a href="https://www.macports.org/install.php">https://www.macports.org/install.php</a>  先根據 Catalina 操作系統版本安裝 Macports 之後, 再利用:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">sudo port install scite</pre>
<p>安裝 SciTE 文字編輯器.</p>
<p>至此, 再加上 Catalina 原有的 git 指令, 使用者已經可以在 MacBook 上執行與 Windows 10 64 位元操作系統上相同的:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git clone --recurse-submodules

git add .

git commit -m "commit message"

git push

git pull

git submodule add

git remote add

git branch

git merge </pre>
<p>等指令, 只是在執行 python 程式時, 必須使用:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">python3 wsgi.py

pip3 install certain_module</pre>
<p>否則直接使用 python 執行, 將會用 Python 2.7 環境執行而產生錯誤.</p>
<h4>其他建議安裝套件</h4>
<p style="padding-left: 30px;">Microsoft Remote Desktop</p>
<p style="padding-left: 30px;">Firefox</p>
<p style="padding-left: 30px;">OBS</p>
<p style="padding-left: 30px;">Visual Studio Code</p>
<p style="padding-left: 60px;"><a href="https://drive.google.com/open?id=1VeO6HfA3eq8kn5q9m2iJ8SdGCVwUhizo">Visual Studio Code Distilled.pdf</a> (for @gm users only)</p>
<p style="padding-left: 30px;">Flutter (Dart)</p>
<h4>其他提示</h4>
<p style="padding-left: 30px;">Command + Shift + . (toggle hidden folders and files)</p><h2>W15-W18</h2>
<p>各分組除了必須將 W1-W14 週的所有上課內容, 以圖文及影音資料加以整理在個人及分組倉儲、網站及簡報外.</p>
<p>可以自選另一主題, 將分組協同的過程與內容整理在個人與分組的倉儲資料中.</p>
<p style="padding-left: 30px;"><a href="http://faculty.ndhu.edu.tw/~e-poem/poemroad/chen-genshiung">http://faculty.ndhu.edu.tw/~e-poem/poemroad/chen-genshiung</a></p>
<p style="padding-left: 30px;"><img alt="" height="497" src="/images/poet.png" width="300"/></p><h3>未來規劃</h3>
<h4>二技招生</h4>
<p style="padding-left: 30px;"><a href="https://techexpo.moe.edu.tw/search/profile_committee.php?comid=comd01">二技日間部申請入學 </a></p>
<h4>大學轉學考</h4>
<p style="padding-left: 30px;"><a href="https://edu.law.moe.gov.tw/LawContent.aspx?id=FL008652">大學辦理轉學招生審核作業要點</a></p>
<h4>進入職場</h4>
<p style="padding-left: 30px;"><a href="https://edu.law.moe.gov.tw/LawContent.aspx?id=GL001611&amp;KeyWord=%e4%ba%94%e5%b0%88">教育部補助大專校院辦理五年制專科學校畢業生投入職場要點</a></p>
<h4>畢業三年後報考碩士班</h4>
<p style="padding-left: 30px;"><a href="https://edu.law.moe.gov.tw/LawContent.aspx?id=FL008644&amp;KeyWord=%e5%a4%a7%e5%ad%b8%e5%90%8c%e7%ad%89%e5%ad%b8%e5%8a%9b">大學同等學力第五條規定</a></p>
<h4><a href="https://www.google.com/search?client=firefox-b-1-d&amp;ei=JgfIXpb8B9SXr7wPlOegoAY&amp;q=%E4%BA%94%E5%B0%88%E7%95%A2%E6%A5%AD%E5%87%BA%E5%9C%8B%E7%95%99%E5%AD%B8&amp;oq=%E4%BA%94%E5%B0%88%E7%95%A2%E6%A5%AD%E5%87%BA%E5%9C%8B%E7%95%99%E5%AD%B8&amp;gs_lcp=CgZwc3ktYWIQDFAAWABg3voBaABwAHgAgAEAiAEAkgEAmAEAqgEHZ3dzLXdpeg&amp;sclient=psy-ab&amp;ved=0ahUKEwiWp9b4-sfpAhXUy4sBHZQzCGQQ4dUDCAs">出國留學</a></h4>
<p></p>